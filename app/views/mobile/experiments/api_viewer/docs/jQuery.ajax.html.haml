%div{"data-role" => "page"}
  %div{"data-role" => "header"}
    %h1 jQuery.ajax()
  %div{"data-role" => "content", "data-theme" => "c", :id => "jQuery.ajax1"}
    %h2.jq-clearfix.roundTop.section-title
      %span.name jQuery.ajax( settings )
      %span.returns
        Returns:
        %a.return{:href => "http://docs.jquery.com/Types#XMLHttpRequest"} XMLHttpRequest
    .entry-details
      %p.desc
        %strong> Description:
        Perform an asynchronous HTTP (Ajax) request.
      %ul.signatures
        %li.signature{:id => "jQuery.ajax-settings"}
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.0/"} 1.0
            jQuery.ajax( settings )
          %p.arguement
            %strong> settings
            A set of key/value pairs that configure the Ajax request. All options are optional. A default can be set for any option with
            = succeed "." do
              %a{:href => "/jQuery.ajaxSetup"} $.ajaxSetup()
          .options
            %h5.option
              async
              %span
                %a{:href => "http://docs.jquery.com/Types#Boolean"} Boolean
            .default-value
              %strong> Default:
              true
            %p By default, all requests are sent asynchronous (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active.
            %h5.option
              beforeSend(XMLHttpRequest)
              %span
                %a{:href => "http://docs.jquery.com/Types#Function"} Function
            %p
              A pre-callback to modify the XMLHttpRequest object before it is sent. Use this to set custom headers etc. The XMLHttpRequest is passed as the only argument. This is an
              = succeed "." do
                %a{:href => "http://docs.jquery.com/Ajax_Events"} Ajax Event
              You may return false in function to cancel the request.
            %h5.option
              cache
              %span
                %a{:href => "http://docs.jquery.com/Types#Boolean"} Boolean
            .default-value
              %strong> Default:
              true, false for dataType 'script' and 'jsonp'
            %p If set to false it will force the pages that you request to not be cached by the browser.
            %h5.option
              complete(XMLHttpRequest, textStatus)
              %span
                %a{:href => "http://docs.jquery.com/Types#Function"} Function
            %p
              A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The XMLHttpRequest object and a string describing the status of the request. This is an
              = succeed "." do
                %a{:href => "http://docs.jquery.com/Ajax_Events"} Ajax Event
            %h5.option
              contentType
              %span
                %a{:href => "http://docs.jquery.com/Types#String"} String
            .default-value
              %strong> Default:
              'application/x-www-form-urlencoded'
            %p When sending data to the server, use this content-type. Default is "application/x-www-form-urlencoded", which is fine for most cases. If you explicitly pass in a content-type to $.ajax() then it'll always be sent to the server (even if no data is sent).
            %h5.option
              context
              %span
                %a{:href => "http://docs.jquery.com/Types#Object"} Object
            %p This object will be made the context of all Ajax-related callbacks. For example specifying a DOM element as the context will make that the context for the complete callback of a request, like so:
            %pre
              :preserve
                $.ajax({ url: "test.html", context: document.body, success: function(){
                        $(this).addClass("done");
                      }});            %h5.option
              data
              %span
                %a{:href => "http://docs.jquery.com/Types#Object,%20String"} Object, String
            %p Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key i.e. {foo:["bar1", "bar2"]} becomes '&amp;foo=bar1&amp;foo=bar2'.
            %h5.option
              dataFilter(data, type)
              %span
                %a{:href => "http://docs.jquery.com/Types#Function"} Function
            %p A function to be used to handle the raw responsed data of XMLHttpRequest.This is a pre-filtering function to sanitize the response.You should return the sanitized data.The function gets passed two arguments: The raw data returned from the server, and the 'dataType' parameter.
            %h5.option
              dataType
              %span
                %a{:href => "http://docs.jquery.com/Types#String"} String
            .default-value
              %strong> Default:
              Intelligent Guess (xml, json, script, or html)
            %p
              The type of data that you're expecting back from the server. If none is specified, jQuery will intelligently try to get the results, based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:
            %ul
              %li "xml": Returns a XML document that can be processed via jQuery.
              %li "html": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.
              %li
                "script": Evaluates the response as JavaScript and returns it as plain text. Disables caching unless option "cache" is used.
                %strong Note:
                This will turn POSTs into GETs for remote-domain requests.
              %li "json": Evaluates the response as JSON and returns a JavaScript object. In jQuery 1.4 the JSON parsing is done in a strict manner, any malformed JSON is rejected and a parsererror is thrown.
              %li
                "jsonp": Loads in a JSON block using
                = succeed "." do
                  %a{:href => "http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/"} JSONP
                Will add an extra "?callback=?" to the end of your URL to specify the callback.
              %li "text": A plain text string.
            %h5.option
              error(XMLHttpRequest, textStatus, errorThrown)
              %span
                %a{:href => "http://docs.jquery.com/Types#Function"} Function
            %p
              A function to be called if the request fails. The function is passed three arguments: The XMLHttpRequest object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are "timeout", "error", "notmodified" and "parsererror". This is an
              = succeed "." do
                %a{:href => "http://docs.jquery.com/Ajax_Events"} Ajax Event
            %h5.option
              global
              %span
                %a{:href => "http://docs.jquery.com/Types#Boolean"} Boolean
            .default-value
              %strong> Default:
              true
            %p
              Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various
              = succeed "." do
                %a{:href => "http://docs.jquery.com/Ajax_Events"} Ajax Events
            %h5.option
              ifModified
              %span
                %a{:href => "http://docs.jquery.com/Types#Boolean"} Boolean
            .default-value
              %strong> Default:
              false
            %p Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data.
            %h5.option
              jsonp
              %span
                %a{:href => "http://docs.jquery.com/Types#String"} String
            %p Override the callback function name in a jsonp request.  This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url for a GET or the data for a POST.  So {jsonp:'onJsonPLoad'} would result in 'onJsonPLoad=?' passed to the server.
            %h5.option
              jsonpCallback
              %span
                %a{:href => "http://docs.jquery.com/Types#String"} String
            %p Specify the callback function name for a jsonp request.  This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests.
            %h5.option
              password
              %span
                %a{:href => "http://docs.jquery.com/Types#String"} String
            %p A password to be used in response to an HTTP access authentication request.
            %h5.option
              processData
              %span
                %a{:href => "http://docs.jquery.com/Types#Boolean"} Boolean
            .default-value
              %strong> Default:
              true
            %p By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type "application/x-www-form-urlencoded". If you want to send a DOMDocument, or other non-processed data, set this option to false.
            %h5.option
              scriptCharset
              %span
                %a{:href => "http://docs.jquery.com/Types#String"} String
            %p Only for requests with "jsonp" or "script" dataType and "GET" type. Forces the request to be interpreted as a certain charset. Only needed for charset differences between the remote and local content.
            %h5.option
              success(data, textStatus, XMLHttpRequest)
              %span
                %a{:href => "http://docs.jquery.com/Types#Function"} Function
            %p
              A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the 'dataType' parameter; a string describing the status; and the XMLHttpRequest object (available as of jQuery 1.4). This is an
              = succeed "." do
                %a{:href => "http://docs.jquery.com/Ajax_Events"} Ajax Event
            %h5.option
              timeout
              %span
                %a{:href => "http://docs.jquery.com/Types#Number"} Number
            %p
              Set a local timeout (in milliseconds) for the request. This will override the global timeout, if one is set via
              = succeed "." do
                %a{:href => "/jQuery.ajaxSetup"} $.ajaxSetup
              For example, you could use this property to give a single request a longer timeout than all other requests that you've set to time out in one second. See
              = succeed "()" do
                %a{:href => "/jQuery.ajaxSetup"} $.ajaxSetup
              for global timeouts.
            %h5.option
              traditional
              %span
                %a{:href => "http://docs.jquery.com/Types#Boolean"} Boolean
            %p
              Set this to true if you wish to use the traditional style of
              = succeed "." do
                %a{:href => "/jQuery.param"} param serialization
            %h5.option
              type
              %span
                %a{:href => "http://docs.jquery.com/Types#String"} String
            .default-value
              %strong> Default:
              'GET'
            %p
              The type of request to make ("POST" or "GET"), default is "GET".
              %strong Note:
              Other HTTP request methods, such as PUT and DELETE, can also be used here, but they are not supported by all browsers.
            %h5.option
              url
              %span
                %a{:href => "http://docs.jquery.com/Types#String"} String
            .default-value
              %strong> Default:
              The current page
            %p A string containing the URL to which the request is sent.
            %h5.option
              username
              %span
                %a{:href => "http://docs.jquery.com/Types#String"} String
            %p A username to be used in response to an HTTP access authentication request.
            %h5.option
              xhr
              %span
                %a{:href => "http://docs.jquery.com/Types#Function"} Function
            %p Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.
      .longdesc
        %p
          The
          %code $.ajax()
          function underlies all Ajax requests sent by jQuery.  It is often unnecessary to directly call this function, as several higher-level alternatives like
          %code
            %a{:href => "/jQuery.get"} $.get()
          and
          %code
            %a{:href => "/load"} .load()
          are available and are easier to use. If less common options are required, though,
          %code $.ajax()
          can be used more flexibly.
        %p
          At its simplest, the
          %code $.ajax()
          function can be called with no arguments:
        %pre $.ajax();
        %p
          %strong Note:
          Default settings can be set globally by using the
          %code
            %a{:href => "/jQuery.ajaxSetup"} $.ajaxSetup()
          function.
        %p This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, we can implement one of the callback functions.
        %h4#callback-functions Callback Functions
        %p
          The
          = succeed "," do
            %code beforeSend
          = succeed "," do
            %code error
          = succeed "," do
            %code dataFilter
          %code success
          and
          %code complete
          options all take callback functions that are invoked at the appropriate times:
        %ol
          %li
            %code beforeSend
            is called before the request is sent, and is passed the
            %code XMLHttpRequest
            object as a parameter.
          %li
            %code error
            is called if the request fails. It is passed the
            %code XMLHttpRequest
            object, a string indicating the error type, and an exception object if applicable.
          %li
            %code dataFilter
            is called on success. It is passed the returned data and the value of
            = succeed "," do
              %code dataType
            and must return the (possibly altered) data to pass on to
            = succeed "." do
              %code success
          %li
            %code success
            is called if the request succeeds. It is passed the returned data, a string containing the success code, and the
            %code XMLHttpRequest
            object.
          %li
            %code complete
            is called when the request finishes, whether in failure or success. It is passed the
            %code XMLHttpRequest
            object, as well as a string containing the success or error code.
        %p
          To make use of the returned HTML, we can implement a
          %code success
          handler:
        %pre
          :preserve
            $.ajax({
              url: 'ajax/test.html',
              success: function(data) {
                $('.result').html(data);
                alert('Load was performed.');
              }
            });        %p
          Such a simple example would generally be better served by using
          %code
            %a{:href => "/load"} .load()
          or
          = succeed "." do
            %code
              %a{:href => "/jQuery.get"} $.get()
        %h4#data-types Data Types
        %p
          The
          %code $.ajax()
          function relies on the server to provide information about the retrieved data. If the server reports the return data as XML, the result can be traversed using normal XML methods or jQuery's selectors. If another type is detected, such as HTML in the example above, the data is treated as text.
        %p
          Different data handling can be achieved by using the
          %code dataType
          option. Besides plain
          = succeed "," do
            %code xml
          the
          %code dataType
          can be
          = succeed "," do
            %code html
          = succeed "," do
            %code json
          = succeed "," do
            %code jsonp
          = succeed "," do
            %code script
          or
          = succeed "." do
            %code text
        %p
          The
          %code text
          and
          %code xml
          types return the data with no processing. The data is simply passed on to the success handler, either through the
          %code responseText
          or
          %code responseHTML
          property of the
          %code XMLHttpRequest
          object, respectively.
        %p
          %strong Note:
          We must ensure that the MIME type reported by the web server matches our choice of
          = succeed "." do
            %code dataType
          In particular, XML must be declared by the server as
          %code text/xml
          or
          %code application/xml
          for consistent results.
        %p
          If
          %code html
          is specified, any embedded JavaScript inside the retrieved data is executed before the HTML is returned as a string. Similarly,
          %code script
          will execute the JavaScript that is pulled back from the server, then return the script itself as textual data.
        %p
          The
          %code json
          type parses the fetched data file as a JavaScript object and returns the constructed object as the result data. To do so, it uses
          %code JSON.parse()
          when the browser supports it; otherwise it uses a
          %code Function
          = succeed "." do
            %strong constructor
          JSON data is convenient for communicating structured data in a way that is concise and easy for JavaScript to parse. If the fetched data file exists on a remote server, the
          %code jsonp
          type can be used instead. This type will cause a query string parameter of
          %code callback=?
          to be appended to the URL; the server should prepend the JSON data with the callback name to form a valid JSONP response. If a specific parameter name is desired instead of
          = succeed "," do
            %code callback
          it can be specified with the
          %code jsonp
          option to
          = succeed "." do
            %code $.ajax()
        %p
          %strong Note:
          JSONP is an extension of the JSON format, requiring some server-side code to detect and handle the query string parameter. More information about it can be found in the
          = succeed "." do
            %a{:href => "http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/"} original post detailing its use
        %p
          When data is retrieved from remote servers (which is only possible using the
          %code script
          or
          %code jsonp
          data types), the operation is performed using a
          %code &lt;script&gt;
          tag rather than an
          %code XMLHttpRequest
          object. In this case, no
          %code XMLHttpRequest
          object is returned from
          = succeed "," do
            %code $.ajax()
          nor is one passed to the handler functions such as
          = succeed "." do
            %code beforeSend
        %h4#sending-data-to-server Sending Data to the Server
        %p
          By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the
          %code type
          option. This option affects how the contents of the
          %code data
          option are sent to the server.
        %p
          The
          %code data
          option can contain either a query string of the form
          = succeed "," do
            %code key1=value1&amp;key2=value2
          or a map of the form
          = succeed "." do
            %code {key1: 'value1', key2: 'value2'}
          If the latter form is used, the data is converted into a query string before it is sent. This processing can be circumvented by setting
          %code processData
          to
          = succeed "." do
            %code false
          The processing might be undesirable if we wish to send an XML object to the server; in this case, we would also want to change the
          %code contentType
          option from
          %code application/x-www-form-urlencoded
          to a more appropriate MIME type.
        %h4#advanced-options Advanced Options
        %p
          The
          %code global
          option prevents handlers registered using
          = succeed "," do
            %code
              %a{:href => "/ajaxSend"} .ajaxSend()
          = succeed "," do
            %code
              %a{:href => "/ajaxError"} .ajaxError()
          and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with
          %code
            %a{:href => "/jQuery.ajaxSend"} .ajaxSend()
          if the requests are frequent and brief. See the descriptions of these methods below for more details.
        %p
          If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the
          %code username
          and
          %code password
          options.
        %p
          Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using
          %code
            %a{:href => "/jQuery.ajaxSetup"} $.ajaxSetup()
          rather than being overridden for specific requests with the
          %code timeout
          option.
        %p
          By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set
          %code cache
          to
          = succeed "." do
            %code false
          To cause the request to report failure if the asset has not been modified since the last request, set
          %code ifModified
          to
          = succeed "." do
            %code true
        %p
          The
          %code scriptCharset
          allows the character set to be explicitly specified for requests that use a
          %code &lt;script&gt;
          tag (that is, a type of
          %code script
          or
          = succeed ")." do
            %code jsonp
          This is useful if the script and host page have differing character sets.
        %p
          The first letter in Ajax stands for "asynchronous," meaning that the operation occurs in parallel and the order of completion is not guaranteed. The
          %code async
          option to
          %code $.ajax()
          defaults to
          = succeed "," do
            %code true
          indicating that code execution can continue after the request is made. Setting this option to
          %code false
          (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive.
        %p
          The
          %code $.ajax()
          function returns the
          %code XMLHttpRequest
          object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the
          %code xhr
          option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling
          %code .abort()
          on the object will halt the request before it completes.
      %h3 Examples:
      #entry-examples.entry-examples
        #example-0
          %h4
            Example:
            %span.desc Load and execute a JavaScript file.
          %pre
            %code.example
              :preserve
                $.ajax({
                   type: "GET",
                   url: "test.js",
                   dataType: "script"
                 });        #example-1
          %h4
            Example:
            %span.desc Save some data to the server and notify the user once it's complete.
          %pre
            %code.example
              :preserve
                $.ajax({
                   type: "POST",
                   url: "some.php",
                   data: "name=John&amp;location=Boston",
                   success: function(msg){
                     alert( "Data Saved: " + msg );
                   }
                 });        #example-2
          %h4
            Example:
            %span.desc Retrieve the latest version of an HTML page.
          %pre
            %code.example
              :preserve
                $.ajax({
                  url: "test.html",
                  cache: false,
                  success: function(html){
                    $("#results").append(html);
                  }
                });        #example-3
          %h4
            Example:
            %span.desc
              Loads data synchronously. Blocks the browser while the requests is active.
              It is better to block user interaction by other means when synchronization is
              necessary.
          %pre
            %code.example
              :preserve
                var html = $.ajax({
                  url: "some.php",
                  async: false
                 }).responseText;        #example-4
          %h4
            Example:
            %span.desc
              Sends an xml document as data to the server. By setting the processData
              option to false, the automatic conversion of data to strings is prevented.
          %pre
            %code.example
              :preserve
                var xmlDocument = [create xml document];
                 $.ajax({
                   url: "page.php",
                   processData: false,
                   data: xmlDocument,
                   success: handleResponse
                 });        #example-5
          %h4
            Example:
            %span.desc Sends an id as data to the server, save some data to the server and notify the user once it's complete.
          %pre
            %code.example
              :preserve
                bodyContent = $.ajax({
                      url: "script.php",
                      global: false,
                      type: "POST",
                      data: ({id : this.getAttribute('id')}),
                      dataType: "html",
                      success: function(msg){
                         alert(msg);
                      }
                   }
                ).responseText;