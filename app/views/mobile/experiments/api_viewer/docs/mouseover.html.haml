%div{"data-role" => "page"}
  %div{"data-role" => "header"}
    %h1 .mouseover()
  #mouseover1{"data-role" => "content", "data-theme" => "c"}
    %h2.jq-clearfix.roundTop.section-title
      %span.name .mouseover( handler(eventObject) )
      %span.returns
        Returns:
        %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
    .entry-details
      %p.desc
        %strong> Description:
        Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
      %ul.signatures
        %li#mouseover-handlereventObject.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.0/"} 1.0
            \.mouseover( handler(eventObject) )
          %p.arguement
            %strong> handler(eventObject)
            A function to execute each time the event is triggered.
        %li#mouseover.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.0/"} 1.0
            \.mouseover()
      .longdesc
        %p
          This method is a shortcut for
          %code .bind('mouseover', handler)
          in the first variation, and
          %code .trigger('mouseover')
          in the second.
        %p
          The
          %code mouseover
          event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.
        %p For example, consider the HTML:
        %pre
          :preserve
            &lt;div id="outer"&gt;
              Outer
              &lt;div id="inner"&gt;
                Inner
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div id="other"&gt;
              Trigger the handler
            &lt;/div&gt;
            &lt;div id="log"&gt;&lt;/div&gt;        %p.image
          %img{:alt => "", :src => "http://api.jquery.com/images/0042_05_06.png"}/
        %p The event handler can be bound to any element:
        %pre
          :preserve
            $('#outer').mouseover(function() {
              $('#log').append('&lt;div&gt;Handler for .mouseover() called.&lt;/div&gt;');
            });        %p
          Now when the mouse pointer moves over the
          %span.output Outer
          = succeed "," do
            %code &lt;div&gt;
          the message is appended to
          = succeed "." do
            %code &lt;div id="log"&gt;
          We can also trigger the event when another element is clicked:
        %pre
          :preserve
            $('#other').click(function() {
              $('#outer').mouseover();
            });        %p
          After this code executes, clicks on
          %span.output Trigger the handler
          will also append the message.
        %p
          This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves over the
          %span.output Inner
          element in this example, a
          %code mouseover
          event will be sent to that, then trickle up to
          = succeed "." do
            %span.output Outer
          This can trigger our bound
          %code mouseover
          handler at inopportune times. See the discussion for
          %code .mouseenter()
          for a useful alternative.
      %h3 Example:
      #entry-examples.entry-examples
        #example-0
          %h4
            %span.desc
              Show the number of times mouseover and mouseenter events are triggered.
              mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.
          %pre
            %code.example.demo-code
              :preserve
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                  &lt;style&gt;
                div.out {
                width:40%;
                height:120px;
                margin:0 15px;
                background-color:#D6EDFC;
                float:left;
                }
                div.in {
                width:60%;
                height:60%;
                background-color:#FFCC00;
                margin:10px auto;
                }
                p {
                line-height:1em;
                margin:0;
                padding:0;
                }
                &lt;/style&gt;
                  &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;body&gt;
                	
                &lt;div class="out overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;div class="in overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
                
                &lt;div class="out enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;div class="in enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
                
                
                &lt;script&gt;
                    var i = 0;
                    $("div.overout").mouseover(function(){
                      $("p:first",this).text("mouse over");
                      $("p:last",this).text(++i);
                    }).mouseout(function(){
                      $("p:first",this).text("mouse out");
                    });
                
                    var n = 0;
                    $("div.enterleave").bind("mouseenter",function(){
                      $("p:first",this).text("mouse enter");
                      $("p:last",this).text(++n);
                    }).bind("mouseleave",function(){
                      $("p:first",this).text("mouse leave");
                    });
                
                &lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;          %h4 Demo:
          .demo.code-demo
