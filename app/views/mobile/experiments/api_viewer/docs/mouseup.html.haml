%div{"data-role" => "page"}
  %div{"data-role" => "header"}
    %h1 .mouseup()
  #mouseup1{"data-role" => "content", "data-theme" => "c"}
    %h2.jq-clearfix.roundTop.section-title
      %span.name .mouseup( handler(eventObject) )
      %span.returns
        Returns:
        %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
    .entry-details
      %p.desc
        %strong> Description:
        Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
      %ul.signatures
        %li#mouseup-handlereventObject.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.0/"} 1.0
            \.mouseup( handler(eventObject) )
          %p.arguement
            %strong> handler(eventObject)
            A function to execute each time the event is triggered.
        %li#mouseup.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.0/"} 1.0
            \.mouseup()
      .longdesc
        %p
          This method is a shortcut for
          %code .bind('mouseup', handler)
          in the first variation, and
          %code .trigger('mouseup')
          in the second.
        %p
          The
          %code mouseup
          event is sent to an element when the mouse pointer is over the element, and the mouse button is released. Any HTML element can receive this event.
        %p For example, consider the HTML:
        %pre
          :preserve
            &lt;div id="target"&gt;
              Click here
            &lt;/div&gt;
            &lt;div id="other"&gt;
              Trigger the handler
            &lt;/div&gt;
        %p.image
          %img{:alt => "", :src => "http://api.jquery.com/images/0042_05_02.png"}/
        %p
          The event handler can be bound to any
          = succeed ":" do
            %code &lt;div&gt;
        %pre
          :preserve
            $('#target').mouseup(function() {
              alert('Handler for .mouseup() called.');
            });
        %p Now if we click on this element, the alert is displayed:
        %p
          %span.output Handler for .mouseup() called.
        %p We can also trigger the event when a different element is clicked:
        %pre
          :preserve
            $('#other').click(function() {
              $('#target').mouseup();
            });        %p
          After this code executes, clicks on
          %span.output Trigger the handler
          will also alert the message.
        %p
          If the user clicks outside an element, drags onto it, and releases the button, this is still counted as a
          %code mouseup
          event. This sequence of actions is not treated as a button press in most user interfaces, so it is usually better to use the
          %code click
          event unless we know that the
          %code mouseup
          event is preferable for a particular situation.
      %h3 Example:
      #entry-examples.entry-examples
        #example-0
          %h4
            %span.desc Show texts when mouseup and mousedown event triggering.
          %pre
            %code.example.demo-code
              :preserve
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                  &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;body&gt;
                	&lt;p&gt;Press mouse and release here.&lt;/p&gt;
                
                &lt;script&gt;
                    $("p").mouseup(function(){
                      $(this).append('&lt;span style="color:#F00;"&gt;Mouse up.&lt;/span&gt;');
                    }).mousedown(function(){
                      $(this).append('&lt;span style="color:#00F;"&gt;Mouse down.&lt;/span&gt;');
                    });
                
                &lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;          %h4 Demo:
          .demo.code-demo
