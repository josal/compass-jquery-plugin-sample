%div{"data-role" => "page"}
  %div{"data-role" => "header"}
    %h1 jQuery.each()
  %div{"data-role" => "content", "data-theme" => "c", :id => "jQuery.each1"}
    %h2.jq-clearfix.roundTop.section-title
      %span.name jQuery.each( collection, callback(indexInArray, valueOfElement) )
      %span.returns
        Returns:
        %a.return{:href => "http://docs.jquery.com/Types#Object"} Object
    .entry-details
      %p.desc
        %strong> Description:
        A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
      %ul.signatures
        %li.signature{:id => "jQuery.each-collection-callbackindexInArray, valueOfElement"}
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.0/"} 1.0
            jQuery.each( collection, callback(indexInArray, valueOfElement) )
          %p.arguement
            %strong> collection
            The object or array to iterate over.
          %p.arguement
            %strong> callback(indexInArray, valueOfElement)
            The function that will be executed on every object.
      .longdesc
        %p
          The
          %code $.each()
          function is not the same as
          = succeed "," do
            %a{:href => "/each/"} .each()
          which is used to iterate, exclusively, over a jQuery object. The
          %code $.each()
          function can be used to iterate over any collection, whether it is a map (JavaScript object) or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the
          %code this
          keyword.)
        %pre
          :preserve
            $.each([52, 97], function(index, value) { 
              alert(index + ': ' + value); 
            });
        %p This produces two messages:
        %p
          %span.output 0: 52
          %br
            %span.output 1: 97
        %p If a map is used as the collection, the callback is passed a key-value pair each time:
        %pre
          :preserve
            var map = { 
              'flammable': 'inflammable', 
              'duh': 'no duh' 
            }; 
            $.each(map, function(key, value) { 
              alert(key + ': ' + value); 
            });        %p Once again, this produces two messages:
        %p
          %span.output flammable: inflammable
          %br
            %span.output duh: no duh
        %p
          We can break the
          %code $.each()
          loop at a particular iteration by making the callback function return
          = succeed "." do
            %code false
          Returning
          %em non-false
          is the same as a
          %code continue
          statement in a for loop; it will skip immediately to the next iteration.
      %h3 Examples:
      #entry-examples.entry-examples
        #example-0
          %h4
            Example:
            %span.desc Iterates through the array displaying each number as both a word and numeral
          %pre
            %code.example.demo-code
              :preserve
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                  &lt;style&gt;
                  div { color:blue; }
                  div#five { color:red; }
                  &lt;/style&gt;
                  &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;body&gt;
                	
                  &lt;div id="one"&gt;&lt;/div&gt;
                  &lt;div id="two"&gt;&lt;/div&gt;
                  &lt;div id="three"&gt;&lt;/div&gt;
                  &lt;div id="four"&gt;&lt;/div&gt;
                  &lt;div id="five"&gt;&lt;/div&gt;
                &lt;script&gt;
                    var arr = [ "one", "two", "three", "four", "five" ];
                    var obj = { one:1, two:2, three:3, four:4, five:5 };
                
                    jQuery.each(arr, function() {
                      $("#" + this).text("Mine is " + this + ".");
                       return (this != "three"); // will stop running after "three"
                   });
                
                    jQuery.each(obj, function(i, val) {
                      $("#" + i).append(document.createTextNode(" - " + val));
                    });
                &lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;          %h4 Demo:
          .demo.code-demo
        #example-1
          %h4
            Example:
            %span.desc Iterates over items in an array, accessing both the current item and its index.
          %pre
            %code.example
              :preserve
                $.each( ['a','b','c'], function(i, l){
                   alert( "Index #" + i + ": " + l );
                 });        #example-2
          %h4
            Example:
            %span.desc Iterates over the properties in an object, accessing both the current item and its key.
          %pre
            %code.example
              :preserve
                $.each( { name: "John", lang: "JS" }, function(k, v){
                   alert( "Key: " + k + ", Value: " + v );
                 });