%div{"data-role" => "page"}
  %div{"data-role" => "header"}
    %h1 .data()
  #data1{"data-role" => "content", "data-theme" => "c"}
    %h2.jq-clearfix.roundTop.section-title
      %span.name .data( key, value )
      %span.returns
        Returns:
        %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
    .entry-details
      %p.desc
        %strong> Description:
        Store arbitrary data associated with the matched elements.
      %ul.signatures
        %li#data-key-value.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.2.3/"} 1.2.3
            \.data( key, value )
          %p.arguement
            %strong> key
            A string naming the piece of data to set.
          %p.arguement
            %strong> value
            The new data value; it can be any Javascript type including Array or Object.
        %li#data-obj.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.4/"} 1.4
            \.data( obj )
          %p.arguement
            %strong> obj
            An object of key-value pairs of data to set.
      .longdesc
        %p
          The
          %code .data()
          method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks.
        %p We can set several distinct values for a single element and retrieve them later:
        %pre
          :preserve
            
            $('body').data('foo', 52);
            $('body').data('bar', { myType: 'test', count: 40 });
            
            $('body').data('foo'); // 52
            $('body').data(); // {foo: 52, bar: { myType: 'test', count: 40 }}
        %p
          Setting an element's data object with
          %code .data(obj)
          replaces all data previously stored with that element. If you are using third-party plugins it may not be advisable to completely replace the element's data object, since plugins may have also set data. Until jQuery 1.4.2, jQuery itself used the
          %code .data()
          method to save information about events that have been bound to the element, using a data item named 'events'.
        %pre
          :preserve
            
            $('body').data('foo', 52);
            $('body').data({one: 1, two: 2});
            
            $('body').data('foo'); // undefined
            $('body').data(); // {one: 1, two: 2}
        %p
          Due to the way browsers interact with plugins and external code, the
          %code .data()
          method cannot be used on
          = succeed "," do
            %code &lt;object&gt;
          %code &lt;applet&gt;
          or
          %code &lt;embed&gt;
          elements.
      %h3 Example:
      #entry-examples.entry-examples
        #example-0
          %h4
            %span.desc Store then retrieve a value from the div element.
          %pre
            %code.example.demo-code
              :preserve
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                  &lt;style&gt;
                  div { color:blue; }
                  span { color:red; }
                  &lt;/style&gt;
                  &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;body&gt;
                	&lt;div&gt;
                    The values stored were 
                    &lt;span&gt;&lt;/span&gt;
                    and
                    &lt;span&gt;&lt;/span&gt;
                  &lt;/div&gt;
                &lt;script&gt;
                $("div").data("test", { first: 16, last: "pizza!" });
                $("span:first").text($("div").data("test").first);
                $("span:last").text($("div").data("test").last);
                &lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;          %h4 Demo:
          .demo.code-demo
  #data2{"data-role" => "content", "data-theme" => "c"}
    %h2.jq-clearfix.roundTop.section-title
      %span.name .data( key )
      %span.returns
        Returns:
        %a.return{:href => "http://docs.jquery.com/Types#Object"} Object
    .entry-details
      %p.desc
        %strong> Description:
        Returns value at named data store for the element, as set by data(name, value).
      %ul.signatures
        %li#data-key.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.2.3/"} 1.2.3
            \.data( key )
          %p.arguement
            %strong> key
            Name of the data stored.
        %li#data.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.4/"} 1.4
            \.data()
      .longdesc
        %p
          The
          %code .data()
          method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:
        %pre
          :preserve
            
            alert($('body').data('foo'));
            alert($('body').data());
        %p
          The above lines alert the data values that were set on the
          %code body
          element. If nothing was set on that element, an empty string is returned:
        %p
          Calling
          %code .data()
          with no parameters retrieves all of the values as a JavaScript object. This object can be safely cached in a variable as long as a new object is not set with
          = succeed "." do
            %code .data(obj)
      %h3 Example:
      #entry-examples.entry-examples
        #example-0
          %h4
            %span.desc Get the data named "blah" stored at for an element.
          %pre
            %code.example.demo-code
              :preserve
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                  &lt;style&gt;
                  div { margin:5px; background:yellow; }
                  button { margin:5px; font-size:14px; }
                  p { margin:5px; color:blue; }
                  span { color:red; }
                  &lt;/style&gt;
                  &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;body&gt;
                	&lt;div&gt;A div&lt;/div&gt;
                  &lt;button&gt;Get "blah" from the div&lt;/button&gt;
                  &lt;button&gt;Set "blah" to "hello"&lt;/button&gt;
                
                  &lt;button&gt;Set "blah" to 86&lt;/button&gt;
                  &lt;button&gt;Remove "blah" from the div&lt;/button&gt;
                  &lt;p&gt;The "blah" value of this div is &lt;span&gt;?&lt;/span&gt;&lt;/p&gt;
                &lt;script&gt;
                $("button").click(function(e) {
                  var value;
                
                  switch ($("button").index(this)) {
                    case 0 :
                      value = $("div").data("blah");
                      break;
                    case 1 :
                      $("div").data("blah", "hello");
                      value = "Stored!";
                      break;
                    case 2 :
                      $("div").data("blah", 86);
                      value = "Stored!";
                      break;
                    case 3 :
                      $("div").removeData("blah");
                      value = "Removed!";
                      break;
                  }
                
                  $("span").text("" + value);
                });
                
                &lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;          %h4 Demo:
          .demo.code-demo
