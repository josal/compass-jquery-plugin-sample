%div{"data-role" => "page"}
  %div{"data-role" => "header"}
    %h1 .focus()
  #focus1{"data-role" => "content", "data-theme" => "c"}
    %h2.jq-clearfix.roundTop.section-title
      %span.name .focus( handler(eventObject) )
      %span.returns
        Returns:
        %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
    .entry-details
      %p.desc
        %strong> Description:
        Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
      %ul.signatures
        %li#focus-handlereventObject.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.0/"} 1.0
            \.focus( handler(eventObject) )
          %p.arguement
            %strong> handler(eventObject)
            A function to execute each time the event is triggered.
        %li#focus.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.0/"} 1.0
            \.focus()
      .longdesc
        %ul
          %li
            This method is a shortcut for
            %code .bind('focus', handler)
            in the first variation, and
            %code .trigger('focus')
            in the second.
          %li
            The
            %code focus
            event is sent to an element when it gains focus. This event is implicitly applicable to a limited set of elements, such as  form elements (
            %code> &lt;input&gt;
            ,
            = succeed "," do
              %code &lt;select&gt;
            etc.) and links (
            %code> &lt;a href&gt;
            ). In recent browser versions, the event can be extended to include all element types by explicitly setting the element's
            %code tabindex
            property. An element can gain focus via keyboard commands, such as the Tab key, or by mouse clicks on the element.
          %li Elements with focus are usually highlighted in some way by the browser, for example with a dotted line surrounding the element. The focus is used to determine which element is the first to receive keyboard-related events.
        %p For example, consider the HTML:
        %pre
          :preserve
            &lt;form&gt;
              &lt;input id="target" type="text" value="Field 1" /&gt;
              &lt;input type="text" value="Field 2" /&gt;
            &lt;/form&gt;
            &lt;div id="other"&gt;
              Trigger the handler
            &lt;/div&gt;
        %p The event handler can be bound to the first input field:
        %pre
          :preserve
            $('#target').focus(function() {
              alert('Handler for .focus() called.');
            });        %p Now if we click on the first field, or tab to it from another field, the alert is displayed:
        %p
          %span.output Handler for .focus() called.
        %p We can trigger the event when another element is clicked:
        %pre
          :preserve
            $('#other').click(function() {
              $('#target').focus();
            });        %p
          After this code executes, clicks on
          %span.output Trigger the handler
          will also alert the message.
        %p
          The
          %code focus
          event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the
          %code focus
          event will not work consistently across browsers.
        %blockquote
          %p
            Triggering the focus on hidden elements causes an error in Internet Explorer. Take care to only call
            %code .focus()
            without parameters on elements that are visible.
      %h3 Examples:
      #entry-examples.entry-examples
        #example-0
          %h4
            Example:
            %span.desc Fire focus.
          %pre
            %code.example.demo-code
              :preserve
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                  &lt;style&gt;span {display:none;}&lt;/style&gt;
                  &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;body&gt;
                	&lt;p&gt;&lt;input type="text" /&gt; &lt;span&gt;focus fire&lt;/span&gt;&lt;/p&gt;
                
                &lt;p&gt;&lt;input type="password" /&gt; &lt;span&gt;focus fire&lt;/span&gt;&lt;/p&gt;
                &lt;script&gt;
                    $("input").focus(function () {
                         $(this).next("span").css('display','inline').fadeOut(1000);
                    });
                &lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;          %h4 Demo:
          .demo.code-demo
        #example-1
          %h4
            Example:
            %span.desc To stop people from writing in text input boxes, try:
          %pre
            %code.example
              :preserve
                $("input[type=text]").focus(function(){
                  $(this).blur();
                });        #example-2
          %h4
            Example:
            %span.desc To focus on a login input box with id 'login' on page startup, try:
          %pre
            %code.example
              :preserve
                $(document).ready(function(){
                  $("#login").focus();
                });