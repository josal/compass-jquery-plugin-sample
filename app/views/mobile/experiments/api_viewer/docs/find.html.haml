%div{"data-role" => "page"}
  %div{"data-role" => "header"}
    %h1 .find()
  #find1{"data-role" => "content", "data-theme" => "c"}
    %h2.jq-clearfix.roundTop.section-title
      %span.name .find( selector )
      %span.returns
        Returns:
        %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
    .entry-details
      %p.desc
        %strong> Description:
        Get the descendants of each element in the current set of matched elements, filtered by a selector.
      %ul.signatures
        %li#find-selector.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.0/"} 1.0
            \.find( selector )
          %p.arguement
            %strong> selector
            A string containing a selector expression to match elements against.
      .longdesc
        %p
          Given a jQuery object that represents a set of DOM elements, the
          %code .find()
          method allows us to search through the descendants of these elements in the DOM tree and construct a new jQuery object from the matching elements. The
          %code .find()
          and
          %code .children()
          methods are similar, except that the latter only travels a single level down the DOM tree.
        %p The method accepts a selector expression of the same type that we can pass to the $() function. The elements will be filtered by testing whether they match this selector.
        %p Consider a page with a basic nested list on it:
        %pre
          :preserve
            
            &lt;ul class="level-1"&gt;
              &lt;li class="item-i"&gt;I&lt;/li&gt;
              &lt;li class="item-ii"&gt;II
                &lt;ul class="level-2"&gt;
                  &lt;li class="item-a"&gt;A&lt;/li&gt;
                  &lt;li class="item-b"&gt;B
                    &lt;ul class="level-3"&gt;
                      &lt;li class="item-1"&gt;1&lt;/li&gt;
                      &lt;li class="item-2"&gt;2&lt;/li&gt;
                      &lt;li class="item-3"&gt;3&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li class="item-c"&gt;C&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li class="item-iii"&gt;III&lt;/li&gt;
            &lt;/ul&gt;
        %p If we begin at item II, we can find list items within it:
        %pre $('li.item-ii').find('li').css('background-color', 'red');
        %p The result of this call is a red background on items A, B, 1, 2, 3, and C. Even though item II matches the selector expression, it is not included in the results; only descendants are considered candidates for the match.
        %p
          As discussed in “The jQuery Factory Function” section above, selector context is implemented with the
          %code .find()
          %code method;
          therefore,
          %code $('li.item-ii').find('li')
          is equivalent to
          = succeed "." do
            %code $('li', 'li.item-ii')
        %blckquote
          Unlike in the rest of the tree traversal methods, the selector expression is required in a call to
          = succeed "." do
            %code .find()
          If we need to retrieve all of the descendant elements, we can pass in the universal selector
          %code '*'
          to accomplish this.
      %h3 Examples:
      #entry-examples.entry-examples
        #example-0
          %h4
            Example:
            %span.desc Starts with all paragraphs and searches for descendant span elements, same as $("p span")
          %pre
            %code.example.demo-code
              :preserve
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                  &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;body&gt;
                	&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;, how are you?&lt;/p&gt;
                
                  &lt;p&gt;Me? I'm &lt;span&gt;good&lt;/span&gt;.&lt;/p&gt;
                &lt;script&gt;$("p").find("span").css('color','red');&lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;          %h4 Demo:
          .demo.code-demo
        #example-1
          %h4
            Example:
            %span.desc Add spans around each word then add a hover and italicize words with the letter t.
          %pre
            %code.example.demo-code
              :preserve
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                  &lt;style&gt;
                  p { font-size:20px; width:200px; cursor:default; 
                      color:blue; font-weight:bold; margin:0 10px; }
                  .hilite { background:yellow; }
                  &lt;/style&gt;
                  &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;body&gt;
                	&lt;p&gt;
                    When the day is short
                    find that which matters to you
                    or stop believing
                  &lt;/p&gt;
                &lt;script&gt;
                    var newText = $("p").text().split(" ").join("&lt;/span&gt; &lt;span&gt;");
                    newText = "&lt;span&gt;" + newText + "&lt;/span&gt;";
                
                    $("p").html(newText)
                          .find('span')
                            .hover(function () { $(this).addClass("hilite"); },
                                   function () { $(this).removeClass("hilite"); })
                          .end()
                          .find(":contains('t')")
                            .css({"font-style":"italic", "font-weight":"bolder"});
                
                &lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;          %h4 Demo:
          .demo.code-demo
