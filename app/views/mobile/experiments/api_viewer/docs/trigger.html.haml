%div{"data-role" => "page"}
  %div{"data-role" => "header"}
    %h1 .trigger()
  #trigger1{"data-role" => "content", "data-theme" => "c"}
    %h2.jq-clearfix.roundTop.section-title
      %span.name .trigger( eventType, extraParameters )
      %span.returns
        Returns:
        %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
    .entry-details
      %p.desc
        %strong> Description:
        Execute all handlers and behaviors attached to the matched elements for the given event type.
      %ul.signatures
        %li#trigger-eventType-extraParameters.signature
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.0/"} 1.0
            \.trigger( eventType, extraParameters )
          %p.arguement
            %strong> eventType
            A string containing a JavaScript event type, such as
            %code click
            or
            = succeed "." do
              %code submit
          %p.arguement
            %strong> extraParameters
            An array of additional parameters to pass along to the event handler.
      .longdesc
        %p
          Any event handlers attached with
          %code .bind()
          or one of its shortcut methods are triggered when the corresponding event occurs. They can be fired manually, however, with the
          %code .trigger()
          method. A call to
          %code .trigger()
          executes the handlers in the same order they would be if the event were triggered naturally by the user:
        %pre
          :preserve
            $('#foo').bind('click', function() {
                  alert($(this).text());
                });
                $('#foo').trigger('click');        %p
          While
          %code .trigger()
          simulates an event activation, complete with a synthesized event object, it does not perfectly replicate a naturally-occurring event.
        %p
          When we define a custom event type using the
          %code .bind()
          method, the second argument to
          %code .trigger()
          can become useful. For example, suppose we have bound a handler for the
          %code custom
          event to our element instead of the built-in
          %code click
          event as we did above:
        %pre
          :preserve
            $('#foo').bind('custom', function(event, param1, param2) {
              alert(param1 + "\n" + param2);
            });
            $('#foo').trigger('custom', ['Custom', 'Event']);
        %p
          The event object is always passed as the first parameter to an event handler, but if additional parameters are specified during a
          %code .trigger()
          call as they are here, these parameters will be passed along to the handler as well.
        %p
          Note the difference between the extra parameters we're passing here and the
          %code eventData
          parameter to the
          %a{:href => "/bind/"} .bind()
          method. Both are mechanisms for passing information to an event handler, but the
          %code extraParameters
          argument to
          %code .trigger()
          allows information to be determined at the time the event is triggered, while the
          %code eventData
          argument to
          %code .bind()
          requires the information to be already computed at the time the handler is bound.
      %h3 Examples:
      #entry-examples.entry-examples
        #example-0
          %h4
            Example:
            %span.desc Clicks to button #2 also trigger a click for button #1.
          %pre
            %code.example.demo-code
              :preserve
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                  &lt;style&gt;
                
                button { margin:10px; }
                div { color:blue; font-weight:bold; }
                span { color:red; }
                &lt;/style&gt;
                  &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                &lt;/head&gt;
                &lt;body&gt;
                	&lt;button&gt;Button #1&lt;/button&gt;
                &lt;button&gt;Button #2&lt;/button&gt;
                &lt;div&gt;&lt;span&gt;0&lt;/span&gt; button #1 clicks.&lt;/div&gt;
                
                &lt;div&gt;&lt;span&gt;0&lt;/span&gt; button #2 clicks.&lt;/div&gt;
                &lt;script&gt;
                $("button:first").click(function () {
                update($("span:first"));
                });
                $("button:last").click(function () {
                $("button:first").trigger('click');
                
                update($("span:last"));
                });
                
                function update(j) {
                var n = parseInt(j.text(), 10);
                j.text(n + 1);
                }
                &lt;/script&gt;
                &lt;/body&gt;
                &lt;/html&gt;          %h4 Demo:
          .demo.code-demo
        #example-1
          %h4
            Example:
            %span.desc To submit the first form without using the submit() function, try:
          %pre
            %code.example $("form:first").trigger("submit")
        #example-2
          %h4
            Example:
            %span.desc To submit the first form without using the submit() function, try:
          %pre
            %code.example
              :preserve
                var event = jQuery.Event("submit");
                $("form:first").trigger(event);
                if ( event.isDefaultPrevented() ) {
                // Perform an action...
                }        #example-3
          %h4
            Example:
            %span.desc To pass arbitrary data to an event:
          %pre
            %code.example
              :preserve
                $("p").click( function (event, a, b) {
                // when a normal click fires, a and b are undefined
                // for a trigger like below a refers to "foo" and b refers to "bar"
                
                } ).trigger("click", ["foo", "bar"]);        #example-4
          %h4
            Example:
            %span.desc To pass arbitrary data through an event object:
          %pre
            %code.example
              :preserve
                var event = jQuery.Event("logged");
                event.user = "foo";
                event.pass = "bar";
                $("body").trigger(event);        #example-5
          %h4
            Example:
            %span.desc Alternate way to pass data through an event object:
          %pre
            %code.example
              :preserve
                $("body").trigger({
                type:"logged",
                user:"foo",
                pass:"bar"
                
                });