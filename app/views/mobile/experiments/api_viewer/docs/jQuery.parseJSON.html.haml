%div{"data-role" => "page"}
  %div{"data-role" => "header"}
    %h1 jQuery.parseJSON
  %div{"data-role" => "content", "data-theme" => "c", :id => "jQuery.parseJSON1"}
    %h2.jq-clearfix.roundTop.section-title
      %span.name jQuery.parseJSON( json )
      %span.returns
        Returns:
        %a.return{:href => "http://docs.jquery.com/Types#Object"} Object
    .entry-details
      %p.desc
        %strong> Description:
        Takes a well-formed JSON string and returns the resulting JavaScript object.
      %ul.signatures
        %li.signature{:id => "jQuery.parseJSON-json"}
          %h4.name
            %span.versionAdded>
              version added:
              %a{:href => "/category/version/1.4.1/"} 1.4.1
            jQuery.parseJSON( json )
          %p.arguement
            %strong> json
            The JSON string to parse.
      .longdesc
        %p Passing in a malformed JSON string will result in an exception being thrown. For example, the following are all malformed JSON strings:
        %ul
          %li
            %code {test: 1}
            (test does not have double quotes around it).
          %li
            %code {'test': 1}
            ('test' is using single quotes instead of double quotes).
        %p
          Additionally if you pass in nothing, an empty string, null, or undefined, 'null' will be returned from parseJSON. Where the browser provides a native implementation of
          = succeed "," do
            %code JSON.parse
          jQuery uses it to parse the string. For details on the JSON format, see
          = succeed "." do
            %a{:href => "http://json.org/"} http://json.org/
      %h3 Example:
      #entry-examples.entry-examples
        #example-0
          %h4
            %span.desc Parse a JSON string.
          %pre
            %code.example
              :preserve
                var obj = jQuery.parseJSON('{"name":"John"}');
                alert( obj.name === "John" );