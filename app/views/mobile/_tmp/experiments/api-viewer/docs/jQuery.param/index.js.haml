!!!
%html{:lang => "en"}
  %head
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "content-type"}/
  %body
    %div{"data-role" => "page"}
      %div{"data-role" => "header"}
        %h1 jQuery.param()
      %div{"data-role" => "content", "data-theme" => "c", :id => "jQuery.param1"}
        %h2.jq-clearfix.roundTop.section-title
          %span.name jQuery.param( obj )
          %span.returns
            Returns:
            %a.return{:href => "http://docs.jquery.com/Types#String"} String
        .entry-details
          %p.desc
            %strong> Description:
            Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.
          %ul.signatures
            %li.signature{:id => "jQuery.param-obj"}
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.2/"} 1.2
                jQuery.param( obj )
              %p.arguement
                %strong> obj
                An array or object to serialize.
            %li.signature{:id => "jQuery.param-obj-traditional"}
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.4/"} 1.4
                jQuery.param( obj, traditional )
              %p.arguement
                %strong> obj
                An array or object to serialize.
              %p.arguement
                %strong> traditional
                A Boolean indicating whether to perform a traditional "shallow" serialization.
          .longdesc
            %p
              This function is used internally to convert form element values into a serialized string representation (See
              %a{:href => "/serialize/"} .serialize()
              for more information).
            %p As of jQuery 1.3, the return value of a function is used instead of the function as a String.
            %p
              As of jQuery 1.4, the
              %code $.param()
              method serializes deep objects recursively to accommodate modern scripting languages and frameworks such as PHP and Ruby on Rails. You can disable this functionality globally by setting
              = succeed "." do
                %code jQuery.ajaxSettings.traditional = true;
            %p
              Note: Because some frameworks have limited ability to parse serialized arrays, we should exercise caution when passing an
              %code obj
              argument that contains objects or arrays nested within another array.
            %p In jQuery 1.4 HTML5 input elements are serialized, as well.
            %p We can display a query string representation of an object and a URI-decoded version of the same as follows:
            %pre
              :preserve
                var myObject = {
                  a: {
                    one: 1, 
                    two: 2, 
                    three: 3
                  }, 
                  b: [1,2,3]
                };
                var recursiveEncoded = $.param(myObject);
                var recursiveDecoded = decodeURIComponent($.param(myObject));
                
                alert(recursiveEncoded);
                alert(recursiveDecoded);
            %p
              The values of
              %code recursiveEncoded
              and
              %code recursiveDecoded
              are alerted as follows:
            %p
              %span.output a%5Bone%5D=1&amp;a%5Btwo%5D=2&amp;a%5Bthree%5D=3&amp;b%5B%5D=1&amp;b%5B%5D=2&amp;b%5B%5D=3
              %br
                %span.output a[one]=1&amp;a[two]=2&amp;a[three]=3&amp;b[]=1&amp;b[]=2&amp;b[]=3
            %p
              To emulate the behavior of
              %code $.param()
              prior to jQuery 1.4, we can set the
              %code traditional
              argument to
              = succeed ":" do
                %code true
            %pre
              :preserve
                var myObject = {
                  a: {
                    one: 1, 
                    two: 2, 
                    three: 3
                  }, 
                  b: [1,2,3]
                };
                var shallowEncoded = $.param(myObject, true);
                var shallowDecoded = decodeURIComponent(shallowEncoded);
                
                alert(shallowEncoded);
                alert(shallowDecoded);
            %p
              The values of
              %code shallowEncoded
              and
              %code shallowDecoded
              are alerted as follows:
            %p
              %span.output a=%5Bobject+Object%5D&amp;b=1&amp;b=2&amp;b=3
              %br
                %span.output a=[object+Object]&amp;b=1&amp;b=2&amp;b=3
          %h3 Examples:
          #entry-examples.entry-examples
            #example-0
              %h4
                Example:
                %span.desc Serialize a key/value object.
              %pre
                %code.example.demo-code
                  :preserve
                    &lt;!DOCTYPE html&gt;
                    &lt;html&gt;
                    &lt;head&gt;
                      &lt;style&gt;div { color:red; }&lt;/style&gt;
                      &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                    &lt;/head&gt;
                    &lt;body&gt;
                    	&lt;div id="results"&gt;&lt;/div&gt;
                    &lt;script&gt;
                    
                        var params = { width:1680, height:1050 };
                        var str = jQuery.param(params);
                        $("#results").text(str);
                    &lt;/script&gt;
                    &lt;/body&gt;
                    &lt;/html&gt;              %h4 Demo:
              .demo.code-demo
            #example-1
              %h4
                Example:
                %span.desc Serialize a few complex objects
              %pre
                %code.example
                  :preserve
                    
                    // &lt;=1.3.2: 
                    $.param({ a: [2,3,4] }) // "a=2&amp;a=3&amp;a=4"
                    // &gt;=1.4:
                    $.param({ a: [2,3,4] }) // "a[]=2&amp;a[]=3&amp;a[]=4"
                    
                    // &lt;=1.3.2: 
                    $.param({ a: { b:1,c:2 }, d: [3,4,{ e:5 }] }) // "a=[object+Object]&amp;d=3&amp;d=4&amp;d=[object+Object]"
                    // &gt;=1.4: 
                    $.param({ a: { b:1,c:2 }, d: [3,4,{ e:5 }] }) // "a[b]=1&amp;a[c]=2&amp;d[]=3&amp;d[]=4&amp;d[2][e]=5"
                    
