!!!
%html{:lang => "en"}
  %head
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "content-type"}/
  %body
    %div{"data-role" => "page"}
      %div{"data-role" => "header"}
        %h1 jQuery.get()
      %div{"data-role" => "content", "data-theme" => "c", :id => "jQuery.get1"}
        %h2.jq-clearfix.roundTop.section-title
          %span.name jQuery.get( url, [ data ], [ callback(data, textStatus, XMLHttpRequest) ], [ dataType ] )
          %span.returns
            Returns:
            %a.return{:href => "http://docs.jquery.com/Types#XMLHttpRequest"} XMLHttpRequest
        .entry-details
          %p.desc
            %strong> Description:
            Load data from the server using a HTTP GET request.
          %ul.signatures
            %li.signature{:id => "jQuery.get-url-data-callbackdata, textStatus, XMLHttpRequest-dataType"}
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.0/"} 1.0
                jQuery.get( url, [ data ], [ callback(data, textStatus, XMLHttpRequest) ], [ dataType ] )
              %p.arguement
                %strong> url
                A string containing the URL to which the request is sent.
              %p.arguement
                %strong> data
                A map or string that is sent to the server with the request.
              %p.arguement
                %strong> callback(data, textStatus, XMLHttpRequest)
                A callback function that is executed if the request succeeds.
              %p.arguement
                %strong> dataType
                The type of data expected from the server.
          .longdesc
            %p This is a shorthand Ajax function, which is equivalent to:
            %pre
              $.ajax({
              url:
              = succeed "," do
                %em url
              data:
              = succeed "," do
                %em data
              success:
              = succeed "," do
                %em success
              dataType:
              %em dataType
              });
            %p
              The
              %code success
              callback function is passed the returned data, which will be an XML root element, text string, JavaScript file, or JSON object, depending on the MIME type of the response. It is also passed the text status of the response.
            %p
              As of jQuery 1.4, the
              %code success
              callback function is also passed the XMLHttpRequest object.
            %p Most implementations will specify a success handler:
            %pre
              :preserve
                $.get('ajax/test.html', function(data) {
                  $('.result').html(data);
                  alert('Load was performed.');
                });
            %p This example fetches the requested HTML snippet and inserts it on the page.
          %h3 Examples:
          #entry-examples.entry-examples
            #example-0
              %h4
                Example:
                %span.desc Request the test.php page, but ignore the return results.
              %pre
                %code.example $.get("test.php");
            #example-1
              %h4
                Example:
                %span.desc Request the test.php page and send some additional data along (while still ignoring the return results).
              %pre
                %code.example $.get("test.php", { name: "John", time: "2pm" } );
            #example-2
              %h4
                Example:
                %span.desc pass arrays of data to the server (while still ignoring the return results).
              %pre
                %code.example $.get("test.php", { 'choices[]': ["Jon", "Susan"]} );
            #example-3
              %h4
                Example:
                %span.desc Alert out the results from requesting test.php (HTML or XML, depending on what was returned).
              %pre
                %code.example
                  :preserve
                    $.get("test.php", function(data){
                       alert("Data Loaded: " + data);
                     });            #example-4
              %h4
                Example:
                %span.desc Alert out the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).
              %pre
                %code.example
                  :preserve
                    $.get("test.cgi", { name: "John", time: "2pm" },
                       function(data){
                         alert("Data Loaded: " + data);
                       });