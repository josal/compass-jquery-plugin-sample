!!!
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "content-type"}/
  %body
    %div{"data-role" => "page"}
      %div{"data-role" => "header"}
        %h1 .ajaxComplete()
      #ajaxComplete1{"data-role" => "content", "data-theme" => "c"}
        %h2.jq-clearfix.roundTop.section-title
          %span.name .ajaxComplete( handler(event, XMLHttpRequest, ajaxOptions) )
          %span.returns
            Returns:
            %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
        .entry-details
          %p.desc
            %strong> Description:
            Register a handler to be called when Ajax requests complete. This is an Ajax Event.
          %ul.signatures
            %li.signature{:id => "ajaxComplete-handlerevent, XMLHttpRequest, ajaxOptions"}
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.0/"} 1.0
                \.ajaxComplete( handler(event, XMLHttpRequest, ajaxOptions) )
              %p.arguement
                %strong> handler(event, XMLHttpRequest, ajaxOptions)
                The function to be invoked.
          .longdesc
            %p
              Whenever an Ajax request completes, jQuery triggers the
              %code ajaxComplete
              event. Any and all handlers that have been registered with the
              %code .ajaxComplete()
              method are executed at this time.
            %p To observe this method in action, we can set up a basic Ajax load request:
            %pre
              :preserve
                &lt;div class="trigger"&gt;Trigger&lt;/div&gt;
                &lt;div class="result"&gt;&lt;/div&gt;
                &lt;div class="log"&gt;&lt;/div&gt;
            %p We can attach our event handler to any element:
            %pre
              :preserve
                $('.log').ajaxComplete(function() {
                  $(this).text('Triggered ajaxComplete handler.');
                });
            %p Now, we can make an Ajax request using any jQuery method:
            %pre
              :preserve
                $('.trigger').click(function() {
                  $('.result').load('ajax/test.html');
                });            %p When the user clicks the button and the Ajax request completes, the log message is displayed.
            %p
              %strong Note:
              Because
              %code .ajaxComplete()
              is implemented as a method of jQuery object instances, we can use the
              %code this
              keyword as we do here to refer to the selected elements within the callback function.
            %p
              All
              %code ajaxComplete
              handlers are invoked, regardless of what Ajax request was completed. If we must differentiate between the requests, we can use the parameters passed to the handler. Each time an
              %code ajaxComplete
              handler is executed, it is passed the event object, the
              %code XMLHttpRequest
              object, and the settings object that was used in the creation of the request. For example, we can restrict our callback to only handling events dealing with a particular URL:
            %pre
              :preserve
                $('.log').ajaxComplete(function(e, xhr, settings) {
                  if (settings.url == 'ajax/test.html') {
                    $(this).text('Triggered ajaxComplete handler.');
                  }
                });          %h3 Example:
          #entry-examples.entry-examples
            #example-0
              %h4
                %span.desc Show a message when an Ajax request completes.
              %pre
                %code.example
                  :preserve
                    $("#msg").ajaxComplete(function(event,request, settings){
                       $(this).append("&lt;li&gt;Request Complete.&lt;/li&gt;");
                     });