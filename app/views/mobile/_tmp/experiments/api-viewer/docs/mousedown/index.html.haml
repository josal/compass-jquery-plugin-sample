!!!
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "content-type"}/
  %body
    %div{"data-role" => "page"}
      %div{"data-role" => "header"}
        %h1 .mousedown()
      #mousedown1{"data-role" => "content", "data-theme" => "c"}
        %h2.jq-clearfix.roundTop.section-title
          %span.name .mousedown( handler(eventObject) )
          %span.returns
            Returns:
            %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
        .entry-details
          %p.desc
            %strong> Description:
            Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
          %ul.signatures
            %li#mousedown-handlereventObject.signature
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.0/"} 1.0
                \.mousedown( handler(eventObject) )
              %p.arguement
                %strong> handler(eventObject)
                A function to execute each time the event is triggered.
            %li#mousedown.signature
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.0/"} 1.0
                \.mousedown()
          .longdesc
            %p
              This method is a shortcut for
              %code .bind('mousedown', handler)
              in the first variation, and
              %code .trigger('mousedown')
              in the second.
            %p
              The
              %code mousedown
              event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed. Any HTML element can receive this event.
            %p For example, consider the HTML:
            %pre
              :preserve
                &lt;div id="target"&gt;
                  Click here
                &lt;/div&gt;
                &lt;div id="other"&gt;
                  Trigger the handler
                &lt;/div&gt;            %p.image
              %img{:alt => "", :src => "http://api.jquery.com/images/0042_05_01.png"}/
            %p
              The event handler can be bound to any
              = succeed ":" do
                %code &lt;div&gt;
            %pre
              :preserve
                $('#target').mousedown(function() {
                  alert('Handler for .mousedown() called.');
                });            %p Now if we click on this element, the alert is displayed:
            %p
              %span.output Handler for .mousedown() called.
            %p We can also trigger the event when a different element is clicked:
            %pre
              :preserve
                $('#other').click(function() {
                  $('#target').mousedown();
                });            %p
              After this code executes, clicks on
              %span.output Trigger the handler
              will also alert the message.
            %p
              The
              %code mousedown
              event is sent when any mouse button is clicked. To act only on specific buttons, we can use the event object's
              = succeed "property." do
                %code which
              Not all browsers support this property (Internet Explorer uses button instead), but jQuery normalizes the property so that it is safe to use in any browser. The value of
              %code which
              will be 1 for the left button, 2 for the middle button, or 3 for the right button.
            %p This event is primarily useful for ensuring that the primary button was used to begin a drag operation; if ignored, strange results can occur when the user attempts to use a context menu. While the middle and right buttons can be detected with these properties, this is not reliable. In Opera and Safari, for example, right mouse button clicks are not detectable by default.
            %p
              If the user clicks on an element, drags away from it, and releases the button, this is still counted as a
              %code mousedown
              event. This sequence of actions is treated as a "canceling" of the button press in most user interfaces, so it is usually better to use the
              %code click
              event unless we know that the
              %code mousedown
              event is preferable for a particular situation.
          %h3 Example:
          #entry-examples.entry-examples
            #example-0
              %h4
                %span.desc Show texts when mouseup and mousedown event triggering.
              %pre
                %code.example.demo-code
                  :preserve
                    &lt;!DOCTYPE html&gt;
                    &lt;html&gt;
                    &lt;head&gt;
                      &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                    &lt;/head&gt;
                    &lt;body&gt;
                    	&lt;p&gt;Press mouse and release here.&lt;/p&gt;
                    
                    &lt;script&gt;
                        $("p").mouseup(function(){
                          $(this).append('&lt;span style="color:#F00;"&gt;Mouse up.&lt;/span&gt;');
                        }).mousedown(function(){
                          $(this).append('&lt;span style="color:#00F;"&gt;Mouse down.&lt;/span&gt;');
                        });
                    
                    &lt;/script&gt;
                    &lt;/body&gt;
                    &lt;/html&gt;              %h4 Demo:
              .demo.code-demo
