!!!
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "content-type"}/
  %body
    %div{"data-role" => "page"}
      %div{"data-role" => "header"}
        %h1 jQuery.extend()
      %div{"data-role" => "content", "data-theme" => "c", :id => "jQuery.extend1"}
        %h2.jq-clearfix.roundTop.section-title
          %span.name jQuery.extend( target, [ object1 ], [ objectN ] )
          %span.returns
            Returns:
            %a.return{:href => "http://docs.jquery.com/Types#Object"} Object
        .entry-details
          %p.desc
            %strong> Description:
            Merge the contents of two or more objects together into the first object.
          %ul.signatures
            %li.signature{:id => "jQuery.extend-target-object1-objectN"}
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.0/"} 1.0
                jQuery.extend( target, [ object1 ], [ objectN ] )
              %p.arguement
                %strong target
                An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.
              %p.arguement
                %strong> object1
                An object containing additional properties to merge in.
              %p.arguement
                %strong> objectN
                Additional objects containing properties to merge in.
            %li.signature{:id => "jQuery.extend-deep-target-object1-objectN"}
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.1.4/"} 1.1.4
                jQuery.extend( [ deep ], target, object1, [ objectN ] )
              %p.arguement
                %strong> deep
                If true, the merge becomes recursive (aka. deep copy).
              %p.arguement
                %strong> target
                The object to extend. It will receive the new properties.
              %p.arguement
                %strong> object1
                An object containing additional properties to merge in.
              %p.arguement
                %strong> objectN
                Additional objects containing properties to merge in.
          .longdesc
            %p
              When we supply two or more objects to
              = succeed "," do
                %code $.extend()
              properties from all of the objects are added to the target object.
            %p
              If only one argument is supplied to
              = succeed "," do
                %code $.extend()
              this means the target argument was omitted. In this case, the jQuery object itself is assumed to be the target. By doing this, we can add new functions to the jQuery namespace.  This can be useful for plugin authors wishing to add new methods to JQuery.
            %p
              Keep in mind that the target object (first argument) will be modified, and will also be returned from
              = succeed "." do
                %code $.extend()
              If, however, we want to preserve both of the original objects, we can do so by passing an empty object as the target:
            %pre var object = $.extend({}, object1, object2);
            %p
              The merge performed by
              %code $.extend()
              is not recursive by default; if a property of the first object is itself an object or array, it will be completely overwritten by a property with the same key in the second object. The values are not merged. This can be seen in the example below by examining the value of banana. However, by passing
              %code true
              for the first function argument, objects will be recursively merged.
            %p
              Undefined properties are not copied. However, properties inherited from the object's prototype
              %em will
              be copied over.
          %h3 Examples:
          #entry-examples.entry-examples
            #example-0
              %h4
                Example:
                %span.desc Merge two objects, modifying the first.
              %pre
                %code.example
                  :preserve
                    
                    var object1 = {
                      apple: 0,
                      banana: {weight: 52, price: 100},
                      cherry: 97
                    };
                    var object2 = {
                      banana: {price: 200},
                      durian: 100
                    };
                    
                    $.extend(object1, object2);
              %h4 Result:
              %pre
                %code.results object1 === {apple: 0, banana: {price: 200}, cherry: 97, durian: 100}
            #example-1
              %h4
                Example:
                %span.desc Merge two objects recursively, modifying the first.
              %pre
                %code.example
                  :preserve
                    
                    var object1 = {
                      apple: 0,
                      banana: {weight: 52, price: 100},
                      cherry: 97
                    };
                    var object2 = {
                      banana: {price: 200},
                      durian: 100
                    };
                    
                    $.extend(true, object1, object2);
              %h4 Result:
              %pre
                %code.results object1 === {apple: 0, banana: {weight: 52, price: 200}, cherry: 97, durian: 100}
            #example-2
              %h4
                Example:
                %span.desc Merge settings and options, modifying settings.
              %pre
                %code.example
                  :preserve
                    var settings = { validate: false, limit: 5, name: "foo" };
                    var options = { validate: true, name: "bar" };
                    jQuery.extend(settings, options);              %h4 Result:
              %pre
                %code.results settings == { validate: true, limit: 5, name: "bar" }
            #example-3
              %h4
                Example:
                %span.desc Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.
              %pre
                %code.example
                  :preserve
                    var empty = {}
                    var defaults = { validate: false, limit: 5, name: "foo" };
                    var options = { validate: true, name: "bar" };
                    var settings = $.extend(empty, defaults, options);              %h4 Result:
              %pre
                %code.results
                  :preserve
                    settings == { validate: true, limit: 5, name: "bar" }
                    empty == { validate: true, limit: 5, name: "bar" }