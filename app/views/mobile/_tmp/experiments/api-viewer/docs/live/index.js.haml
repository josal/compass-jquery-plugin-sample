!!!
%html{:lang => "en"}
  %head
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "content-type"}/
  %body
    %div{"data-role" => "page"}
      %div{"data-role" => "header"}
        %h1 .live()
      #live1{"data-role" => "content", "data-theme" => "c"}
        %h2.jq-clearfix.roundTop.section-title
          %span.name .live( eventType, handler )
          %span.returns
            Returns:
            %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
        .entry-details
          %p.desc
            %strong> Description:
            Attach a handler to the event for all elements which match the current selector, now or in the future.
          %ul.signatures
            %li#live-eventType-handler.signature
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.3/"} 1.3
                \.live( eventType, handler )
              %p.arguement
                %strong> eventType
                A string containing a JavaScript event type, such as "click" or "keydown." As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names, as well.
              %p.arguement
                %strong> handler
                A function to execute at the time the event is triggered.
            %li#live-eventType-eventData-handler.signature
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.4/"} 1.4
                \.live( eventType, eventData, handler )
              %p.arguement
                %strong> eventType
                A string containing a JavaScript event type, such as "click" or "keydown." As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names, as well.
              %p.arguement
                %strong> eventData
                A map of data that will be passed to the event handler.
              %p.arguement
                %strong> handler
                A function to execute at the time the event is triggered.
          .longdesc
            %p
              This method is a variation on the basic
              %code .bind()
              method for attaching event handlers to elements. When
              %code .bind()
              is called, the elements that the jQuery object refers to get the handler attached; elements that get introduced later do not, so they would require another
              %code .bind()
              call. For instance, consider the HTML:
            %pre
              :preserve
                &lt;body&gt;
                  &lt;div class="clickme"&gt;
                    Click here
                  &lt;/div&gt;
                &lt;/body&gt;
            %p We can bind a simple click handler to this element:
            %pre
              :preserve
                $('.clickme').bind('click', function() {
                  // Bound handler called.
                });
            %p
              When the element is clicked, the handler is called. However, suppose that after this, another element is added:
            %pre $('body').append('&lt;div class="clickme"&gt;Another target&lt;/div&gt;');
            %p
              This new element also matches the selector
              = succeed "," do
                %code .clickme
              but since it was added after the call to
              = succeed "," do
                %code .bind()
              clicks on it will do nothing.
            %p
              The
              %code .live()
              method provides an alternative to this behavior. If we bind a click handler to the target element using this method:
            %pre
              :preserve
                $('.clickme').live('click', function() {
                  // Live handler called.
                });            %p And then later add a new element:
            %pre $('body').append('&lt;div class="clickme"&gt;Another target&lt;/div&gt;');
            %p Then clicks on the new element will also trigger the handler.
            %h4#event-delegation Event Delegation
            %p
              The
              %code .live()
              method is able to affect elements that have not yet been added to the DOM through the use of event delegation: a handler bound to an ancestor element is responsible for events that are triggered on its descendants. The handler passed to
              %code .live()
              is never bound to an element; instead,
              %code .live()
              binds a special handler to the root of the DOM tree. In our example, when the new element is clicked, the following steps occur:
            %ol
              %li
                A click event is generated and passed to the
                %code &lt;div&gt;
                for handling.
              %li
                No handler is directly bound to the
                = succeed "," do
                  %code &lt;div&gt;
                so the event bubbles up the DOM tree.
              %li
                The event bubbles up until it reaches the root of the tree, which is where
                %code .live()
                binds its special handlers by default.
                %br
                  %em * As of jQuery 1.4, event bubbling can optionally stop at a DOM element "context".
              %li
                The special
                %code click
                handler bound by
                %code .live()
                executes.
              %li
                This handler tests the
                %code target
                of the event object to see whether it should continue. This test is performed by checking if
                %code $(event.target).closest('.clickme')
                is able to locate a matching element.
              %li If a matching element is found, the original handler is called on it.
            %p Because the test in step 5 is not performed until the event occurs, elements can be added at any time and still respond to events.
            %p
              See the discussion for
              %code
                %a{:href => "/bind"} .bind()
              for more information on event binding.
            %h4#multiple-events Multiple Events
            %p
              As of jQuery 1.4.1
              %code .live()
              can accept multiple, space-separated events, similar to the functionality provided in
              = succeed "." do
                %a{:href => "/bind"} .bind()
              For example, we can "live bind" the
              %code mouseover
              and
              %code mouseout
              events at the same time like so:
            %pre
              :preserve
                $('.hoverme').live('mouseover mouseout', function(event) {
                  if (event.type == 'mouseover') {
                    // do something on mouseover
                  } else {
                    // do something on mouseout
                  }
                });            %h4#event-data Event Data
            %p
              As of jQuery 1.4, the optional
              %code eventData
              parameter allows us to pass additional information to the handler. One handy use of this parameter is to work around issues caused by closures. See the
              %code .bind()
              method's "
              %a{:href => "/bind/#passing-event-data"}> Passing Event Data
              " discussion for more information.
            %h4#event-context Event Context
            %p
              As of jQuery 1.4, live events can be bound to a DOM element "context" rather than to the default document root. To set this context, we use the
              = succeed "," do
                %a{:href => "http://api.jquery.com/jquery/#selector-context"}
                  %code jQuery()
                  function's second argument
              passing in a single DOM element (as opposed to a jQuery collection or a selector).
            %pre
              :preserve
                $('div.clickme', $('#container')[0]).live('click', function() {
                  // Live handler called.
                });            %p
              The live handler in this example is called only when
              %code &lt;div class="clickme"&gt;
              is a descendant of an element with an ID of "container."
            %h4#caveats Caveats
            %p
              The
              %code .live()
              technique is useful, but due to its special approach cannot be simply substituted for
              %code .bind()
              in all cases. Specific differences include:
            %ul
              %li
                DOM traversal methods are not fully supported for finding elements to send to
                = succeed "." do
                  %code .live()
                Rather, the
                %code .live()
                method should always be called directly after a selector, as in the example above.
              %li
                To stop further handlers from executing after one bound using
                = succeed "," do
                  %code .live()
                the handler must return
                = succeed "." do
                  %code false
                Calling
                %code .stopPropagation()
                will not accomplish this.
              %li
                In
                %b jQuery 1.3.x
                only the following JavaScript events (in addition to custom events) could be bound with
                = succeed ":" do
                  %code .live()
                = succeed "," do
                  %code click
                = succeed "," do
                  %code dblclick
                = succeed "," do
                  %code keydown
                = succeed "," do
                  %code keypress
                = succeed "," do
                  %code keyup
                = succeed "," do
                  %code mousedown
                = succeed "," do
                  %code mousemove
                = succeed "," do
                  %code mouseout
                = succeed "," do
                  %code mouseover
                and
                = succeed "." do
                  %code mouseup
            %blockquote
              %ul
                %li
                  As of
                  %b jQuery 1.4
                  the
                  %code .live()
                  method supports custom events as well as all JavaScript events. As of
                  %b jQuery 1.4.1
                  even
                  %code focus
                  and
                  %code blur
                  work with live (mapping to the more appropriate, bubbling, events
                  %code focusin
                  and
                  = succeed ")." do
                    %code focusout
                %li
                  As of
                  %b jQuery 1.4.1
                  the
                  %code hover
                  event can be specified (mapping to "
                  %code> mouseenter mouseleave
                  ").
          %h3 Examples:
          #entry-examples.entry-examples
            #example-0
              %h4
                Example:
                %span.desc Click a paragraph to add another. Note that .live() binds the click event to all paragraphs - even new ones.
              %pre
                %code.example.demo-code
                  :preserve
                    &lt;!DOCTYPE html&gt;
                    &lt;html&gt;
                    &lt;head&gt;
                      &lt;style&gt;
                      p { background:yellow; font-weight:bold; cursor:pointer; 
                          padding:5px; }
                      p.over { background: #ccc; }
                      span { color:red; }
                      &lt;/style&gt;
                      &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                    &lt;/head&gt;
                    &lt;body&gt;
                    	&lt;p&gt;Click me!&lt;/p&gt;
                    
                      &lt;span&gt;&lt;/span&gt;
                    &lt;script&gt;
                        $("p").live("click", function(){
                          $(this).after("&lt;p&gt;Another paragraph!&lt;/p&gt;");
                        });
                    &lt;/script&gt;
                    &lt;/body&gt;
                    &lt;/html&gt;              %h4 Demo:
              .demo.code-demo
            #example-1
              %h4
                Example:
                %span.desc To display each paragraph's text in an alert box whenever it is clicked:
              %pre
                %code.example
                  :preserve
                    $("p").live("click", function(){
                      alert( $(this).text() );
                    });            #example-2
              %h4
                Example:
                %span.desc To cancel a default action and prevent it from bubbling up, return false:
              %pre
                %code.example $("a").live("click", function() { return false; })
            #example-3
              %h4
                Example:
                %span.desc To cancel only the default action by using the preventDefault method.
              %pre
                %code.example
                  :preserve
                    $("a").live("click", function(event){
                      event.preventDefault();
                    });            #example-4
              %h4
                Example:
                %span.desc Can bind custom events too.
              %pre
                %code.example.demo-code
                  :preserve
                    &lt;!DOCTYPE html&gt;
                    &lt;html&gt;
                    &lt;head&gt;
                      &lt;style&gt;
                      p { color:red; }
                      span { color:blue; }
                      &lt;/style&gt;
                      &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                    &lt;/head&gt;
                    &lt;body&gt;
                    	&lt;p&gt;Has an attached custom event.&lt;/p&gt;
                      &lt;button&gt;Trigger custom event&lt;/button&gt;
                      &lt;span style="display:none;"&gt;&lt;/span&gt;
                    &lt;script&gt;
                    
                        $("p").live("myCustomEvent", function(e, myName, myValue){
                          $(this).text("Hi there!");
                          $("span").stop().css("opacity", 1)
                                   .text("myName = " + myName)
                                   .fadeIn(30).fadeOut(1000);
                        });
                        $("button").click(function () {
                          $("p").trigger("myCustomEvent");
                        });
                    
                    &lt;/script&gt;
                    &lt;/body&gt;
                    &lt;/html&gt;              %h4 Demo:
              .demo.code-demo
