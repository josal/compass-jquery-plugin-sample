!!!
%html{:lang => "en"}
  %head
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "content-type"}/
  %body
    %div{"data-role" => "page"}
      %div{"data-role" => "header"}
        %h1 .mouseleave()
      #mouseleave1{"data-role" => "content", "data-theme" => "c"}
        %h2.jq-clearfix.roundTop.section-title
          %span.name .mouseleave( handler(eventObject) )
          %span.returns
            Returns:
            %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
        .entry-details
          %p.desc
            %strong> Description:
            Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
          %ul.signatures
            %li#mouseleave-handlereventObject.signature
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.0/"} 1.0
                \.mouseleave( handler(eventObject) )
              %p.arguement
                %strong> handler(eventObject)
                A function to execute each time the event is triggered.
            %li#mouseleave.signature
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.0/"} 1.0
                \.mouseleave()
          .longdesc
            %p
              This method is a shortcut for
              %code .bind('mouseleave', handler)
              in the first variation, and
              %code .trigger('mouseleave')
              in the second.
            %p
              The
              %code mouseleave
              JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.
            %p For example, consider the HTML:
            %pre
              :preserve
                &lt;div id="outer"&gt;
                  Outer
                  &lt;div id="inner"&gt;
                    Inner
                  &lt;/div&gt;
                &lt;/div&gt;
                &lt;div id="other"&gt;
                  Trigger the handler
                &lt;/div&gt;
                &lt;div id="log"&gt;&lt;/div&gt;            %p.image
              %img{:alt => "", :src => "http://api.jquery.com/images/0042_05_09.png"}/
            %p The event handler can be bound to any element:
            %pre
              :preserve
                $('#outer').mouseleave(function() {
                  $('#log').append('&lt;div&gt;Handler for .mouseleave() called.&lt;/div&gt;');
                });            %p
              Now when the mouse pointer moves out of the
              %span.output Outer
              = succeed "," do
                %code &lt;div&gt;
              the message is appended to
              = succeed "." do
                %code &lt;div id="log"&gt;
              We can also trigger the event when another element is clicked:
            %pre
              :preserve
                $('#other').click(function() {
                  $('#outer').mouseleave();
                });            %p
              After this code executes, clicks on
              %span.output Trigger the handler
              will also append the message.
            %p
              The
              %code mouseleave
              event differs from
              %code mouseout
              in the way it handles event bubbling. If
              %code mouseout
              were used in this example, then when the mouse pointer moved out of the
              %span.output Inner
              element, the handler would be triggered. This is usually undesirable behavior. The
              %code mouseleave
              event, on the other hand, only triggers its handler when the mouse leaves the element it is bound to, not a descendant. So in this example, the handler is triggered when the mouse leaves the
              %span.output Outer
              element, but not the
              %span.output Inner
              element.
          %h3 Example:
          #entry-examples.entry-examples
            #example-0
              %h4
                %span.desc
                  Show number of times mouseout and mouseleave events are triggered.
                  mouseout fires when the pointer moves out of child element as well, while mouseleave fires only when the pointer moves out of the bound element.
              %pre
                %code.example.demo-code
                  :preserve
                    &lt;!DOCTYPE html&gt;
                    &lt;html&gt;
                    &lt;head&gt;
                      &lt;style&gt;
                    div.out {
                    width:40%;
                    height:120px;
                    margin:0 15px;
                    background-color:#D6EDFC;
                    float:left;
                    }
                    div.in {
                    width:60%;
                    height:60%;
                    background-color:#FFCC00;
                    margin:10px auto;
                    }
                    p {
                    line-height:1em;
                    margin:0;
                    padding:0;
                    }
                    &lt;/style&gt;
                      &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                    &lt;/head&gt;
                    &lt;body&gt;
                    	
                    &lt;div class="out overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;div class="in overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
                    
                    &lt;div class="out enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;div class="in enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
                    
                    
                    &lt;script&gt;
                        var i = 0;
                        $("div.overout").mouseover(function(){
                          $("p:first",this).text("mouse over");
                        }).mouseout(function(){
                          $("p:first",this).text("mouse out");
                          $("p:last",this).text(++i);
                        });
                    
                        var n = 0;
                        $("div.enterleave").mouseenter(function(){
                          $("p:first",this).text("mouse enter");
                        }).mouseleave(function(){
                          $("p:first",this).text("mouse leave");
                          $("p:last",this).text(++n);
                        });
                    
                    &lt;/script&gt;
                    &lt;/body&gt;
                    &lt;/html&gt;              %h4 Demo:
              .demo.code-demo
