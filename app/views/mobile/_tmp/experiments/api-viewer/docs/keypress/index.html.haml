!!!
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "content-type"}/
  %body
    %div{"data-role" => "page"}
      %div{"data-role" => "header"}
        %h1 .keypress()
      #keypress1{"data-role" => "content", "data-theme" => "c"}
        %h2.jq-clearfix.roundTop.section-title
          %span.name .keypress( handler(eventObject) )
          %span.returns
            Returns:
            %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
        .entry-details
          %p.desc
            %strong> Description:
            Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
          %ul.signatures
            %li#keypress-handlereventObject.signature
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.0/"} 1.0
                \.keypress( handler(eventObject) )
              %p.arguement
                %strong> handler(eventObject)
                A function to execute each time the event is triggered.
            %li#keypress.signature
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.0/"} 1.0
                \.keypress()
          .longdesc
            %p
              This method is a shortcut for
              %code .bind('keypress', handler)
              in the first variation, and
              %code .trigger('keypress')
              in the second.
            %p
              The
              %code keypress
              event is sent to an element when the browser registers keyboard input. This is similar to the
              %code keydown
              event, except in the case of key repeats. If the user presses and holds a key, a
              = succeed "event" do
                %code keydown
              is triggered once, but separate
              %code keypress
              events are triggered for each inserted character. In addition, modifier keys (such as Shift) cause
              %code keydown
              events but not
              %code keypress
              events.
            %p
              A
              %code keypress
              event handler can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.
            %p For example, consider the HTML:
            %pre
              :preserve
                &lt;form&gt;
                	&lt;fieldset&gt;
                  	&lt;input id="target" type="text" value="Hello there" /&gt;
                	&lt;/fieldset&gt;
                &lt;/form&gt;
                &lt;div id="other"&gt;
                  Trigger the handler
                &lt;/div&gt;            %p The event handler can be bound to the input field:
            %pre
              :preserve
                $('#target').keypress(function() {
                  alert('Handler for .keypress() called.');
                });            %p Now when the insertion point is inside the field and a key is pressed, the alert is displayed:
            %p
              %span.output Handler for .keypress() called.
            %p The message repeats if the key is held down. We can trigger the event manually when another element is clicked:
            %pre
              :preserve
                $('#other').click(function() {
                  $('#target').keypress();
                });            %p
              After this code executes, clicks on
              %span.output Trigger the handler
              will also alert the message.
            %p
              If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the
              %code document
              object. Because of event bubbling, all key presses will make their way up the DOM to the
              %code document
              object unless explicitly stopped.
            %p
              To determine which character was entered, we can examine the event object that is passed to the handler function. While browsers use differing attributes to store this information, jQuery normalizes the
              %code .which
              attribute so we can reliably use it to retrieve the character code.
            %p
              Note that
              %code keydown
              and
              %code keyup
              provide a code indicating which key is pressed, while
              %code keypress
              indicates which character was entered. For example, a lowercase "a" will be reported as 65 by
              %code keydown
              and
              = succeed "," do
                %code keyup
              but as 97 by
              = succeed "." do
                %code keypress
              An uppercase "A" is reported as 65 by all events. Because of this distinction, when catching special keystrokes such as arrow keys,
              %code .keydown()
              or
              %code .keyup()
              is a better choice.
          %h3 Example:
          #entry-examples.entry-examples
            #example-0
              %h4
                %span.desc Show the event object for the keypress handler when a key is pressed in the input.
              %pre
                %code.example.demo-code
                  :preserve
                    &lt;!DOCTYPE html&gt;
                    &lt;html&gt;
                    &lt;head&gt;
                      &lt;style&gt;
                    fieldset { margin-bottom: 1em; }
                    input { display: block; margin-bottom: .25em; }
                    #print-output {
                      width: 100%;
                    }
                    .print-output-line {
                      white-space: pre;
                      padding: 5px;
                      font-family: monaco, monospace;
                      font-size: .7em;
                    }
                    
                    &lt;/style&gt;
                      &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                    &lt;/head&gt;
                    &lt;body&gt;
                    	&lt;form&gt;
                      &lt;fieldset&gt;
                        &lt;label for="target"&gt;Type Something:&lt;/label&gt;
                        &lt;input id="target" type="text" /&gt;
                      &lt;/fieldset&gt;
                    &lt;/form&gt;
                    &lt;button id="other"&gt;
                      Trigger the handler
                    &lt;/button&gt;
                    &lt;script type="text/javascript" src="/scripts/events.js"&gt;&lt;/script&gt;
                    &lt;script&gt;
                    var xTriggered = 0;
                    $('#target').keypress(function(event) {
                      if (event.keyCode == '13') {
                         event.preventDefault();
                       }
                       xTriggered++;
                       var msg = 'Handler for .keypress() called ' + xTriggered + ' time(s).';
                      $.print(msg, 'html');
                      $.print(event);
                    });
                    
                    $('#other').click(function() {
                      $('#target').keypress();
                    });&lt;/script&gt;
                    &lt;/body&gt;
                    &lt;/html&gt;              %h4 Demo:
              .demo.code-demo{:rel => "460"}
