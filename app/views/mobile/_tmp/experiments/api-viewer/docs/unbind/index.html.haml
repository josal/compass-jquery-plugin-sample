!!!
%html{:lang => "en"}
  %head
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "content-type"}/
  %body
    %div{"data-role" => "page"}
      %div{"data-role" => "header"}
        %h1 .unbind()
      #unbind1{"data-role" => "content", "data-theme" => "c"}
        %h2.jq-clearfix.roundTop.section-title
          %span.name .unbind( eventType, handler(eventObject) )
          %span.returns
            Returns:
            %a.return{:href => "http://docs.jquery.com/Types#jQuery"} jQuery
        .entry-details
          %p.desc
            %strong> Description:
            Remove a previously-attached event handler from the elements.
          %ul.signatures
            %li#unbind-eventType-handlereventObject.signature
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.0/"} 1.0
                \.unbind( eventType, handler(eventObject) )
              %p.arguement
                %strong> eventType
                A string containing a JavaScript event type, such as
                %code click
                or
                = succeed "." do
                  %code submit
              %p.arguement
                %strong> handler(eventObject)
                The function that is to be no longer executed.
            %li#unbind-event.signature
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.0/"} 1.0
                \.unbind( event )
              %p.arguement
                %strong> event
                A JavaScript event object as passed to an event handler.
          .longdesc
            %p
              Any handler that has been attached with
              %code .bind()
              can be removed with
              = succeed "." do
                %code .unbind()
              In the simplest case, with no arguments,
              %code .unbind()
              removes all handlers attached to the elements:
            %pre $('#foo').unbind();
            %p This version removes the handlers regardless of type. To be more precise, we can pass an event type:
            %pre $('#foo').unbind('click');
            %p
              By specifying the
              %code click
              event type, only handlers for that event type will be unbound. This approach can still have negative ramifications if other scripts might be attaching behaviors to the same element, however. Robust and extensible applications typically demand the two-argument version for this reason:
            %pre
              :preserve
                var handler = function() {
                  alert('The quick brown fox jumps over the lazy dog.');
                };
                $('#foo').bind('click', handler);
                $('#foo').unbind('click', handler);
            %p
              By naming the handler, we can be assured that no other functions are caught in the crossfire. Note that the following will
              %em not
              work:
            %pre
              :preserve
                $('#foo').bind('click', function() {
                  alert('The quick brown fox jumps over the lazy dog.');
                });
                
                $('#foo').unbind('click', function() {
                  alert('The quick brown fox jumps over the lazy dog.');
                });            %p Even though the two functions are identical in content, they are created separately and so JavaScript is free to keep them as distinct function objects. To unbind a particular handler, we need a reference to that function and not a different one that happens to do the same thing.
            %h4 Using Namespaces
            %p
              Instead of maintaining references to handlers in order to unbind them, we can namespace the events and use this capability to narrow the scope of our unbinding actions. As shown in the discussion for the
              %code .bind()
              method, namespaces are defined by using a period (
              %code> .
              ) character when binding a handler:
            %pre $('#foo').bind('click.myEvents', handler);
            %p When a handler is bound in this fashion, we can still unbind it the normal way:
            %pre $('#foo').unbind('click');
            %p However, if we want to avoid affecting other handlers, we can be more specific:
            %pre $('#foo').unbind('click.myEvents');
            %p If multiple namespaced handlers are bound, we can unbind them at once:
            %pre $('#foo').unbind('click.myEvents.yourEvents');
            %p This syntax is similar to that used for CSS class selectors; they are not hierarchical. This method call is thus the same as:
            %pre $('#foo').unbind('click.yourEvents.myEvents');
            %p We can also unbind all of the handlers in a namespace, regardless of event type:
            %pre $('#foo').unbind('.myEvents');
            %p It is particularly useful to attach namespaces to event bindings when we are developing plug-ins or otherwise writing code that may interact with other event-handling code in the future.
            %h4 Using the Event Object
            %p
              The second form of the
              %code .unbind()
              method is used when we wish to unbind a handler from within itself. For example, suppose we wish to trigger an event handler only three times:
            %pre
              :preserve
                var timesClicked = 0;
                $('#foo').bind('click', function(event) {
                  alert('The quick brown fox jumps over the lazy dog.');
                  timesClicked++;
                  if (timesClicked &gt;= 3) {
                    $(this).unbind(event);
                  }
                });
            %p
              The handler in this case must take a parameter, so that we can capture the event object and use it to unbind the handler after the third click. The event object contains the context necessary for
              %code .unbind()
              to know which handler to remove.
              This example is also an illustration of a closure. Since the handler refers to the
              %code timesClicked
              variable, which is defined outside the function, incrementing the variable has an effect even between invocations of the handler.
          %h3 Examples:
          #entry-examples.entry-examples
            #example-0
              %h4
                Example:
                %span.desc Can bind and unbind events to the colored button.
              %pre
                %code.example.demo-code
                  :preserve
                    &lt;!DOCTYPE html&gt;
                    &lt;html&gt;
                    &lt;head&gt;
                      &lt;style&gt;
                    button { margin:5px; }
                    button#theone { color:red; background:yellow; }
                    &lt;/style&gt;
                      &lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
                    &lt;/head&gt;
                    &lt;body&gt;
                    	&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
                    &lt;button id="bind"&gt;Bind Click&lt;/button&gt;
                    &lt;button id="unbind"&gt;Unbind Click&lt;/button&gt;
                    
                    &lt;div style="display:none;"&gt;Click!&lt;/div&gt;
                    &lt;script&gt;
                    
                    function aClick() {
                    $("div").show().fadeOut("slow");
                    }
                    $("#bind").click(function () {
                    // could use .bind('click', aClick) instead but for variety...
                    $("#theone").click(aClick)
                      .text("Can Click!");
                    });
                    $("#unbind").click(function () {
                    $("#theone").unbind('click', aClick)
                      .text("Does nothing...");
                    });
                    
                    &lt;/script&gt;
                    &lt;/body&gt;
                    &lt;/html&gt;              %h4 Demo:
              .demo.code-demo
            #example-1
              %h4
                Example:
                %span.desc To unbind all events from all paragraphs, write:
              %pre
                %code.example $("p").unbind()
            #example-2
              %h4
                Example:
                %span.desc To unbind all click events from all paragraphs, write:
              %pre
                %code.example $("p").unbind( "click" )
            #example-3
              %h4
                Example:
                %span.desc To unbind just one previously bound handler, pass the function in as the second argument:
              %pre
                %code.example
                  :preserve
                    var foo = function () {
                    // code to handle some kind of event
                    };
                    
                    $("p").bind("click", foo); // ... now foo will be called when paragraphs are clicked ...
                    
                    $("p").unbind("click", foo); // ... foo will no longer be called.