!!!
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %meta{:content => "text/html; charset=UTF-8", "http-equiv" => "content-type"}/
  %body
    %div{"data-role" => "page"}
      %div{"data-role" => "header"}
        %h1 jQuery.merge()
      %div{"data-role" => "content", "data-theme" => "c", :id => "jQuery.merge1"}
        %h2.jq-clearfix.roundTop.section-title
          %span.name jQuery.merge( first, second )
          %span.returns
            Returns:
            %a.return{:href => "http://docs.jquery.com/Types#Array"} Array
        .entry-details
          %p.desc
            %strong> Description:
            Merge the contents of two arrays together into the first array.
          %ul.signatures
            %li.signature{:id => "jQuery.merge-first-second"}
              %h4.name
                %span.versionAdded>
                  version added:
                  %a{:href => "/category/version/1.0/"} 1.0
                jQuery.merge( first, second )
              %p.arguement
                %strong> first
                The first array to merge, the elements of second added.
              %p.arguement
                %strong> second
                The second array to merge into the first, unaltered.
          .longdesc
            %p
              The
              %code $.merge()
              operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The
              %code $.merge()
              function is destructive. It alters the first parameter to add the items from the second.
            %p
              If you need the original first array, make a copy of it before calling
              = succeed "." do
                %code $.merge()
              Fortunately,
              %code $.merge()
              itself can be used for this duplication:
            %pre var newArray = $.merge([], oldArray);
            %p This shortcut creates a new, empty array and merges the contents of oldArray into it, effectively cloning the array.
            %p
              The arguments should be true Javascript Array objects; use
              %code $.makeArray
              if they are not.
          %h3 Examples:
          #entry-examples.entry-examples
            #example-0
              %h4
                Example:
                %span.desc Merges two arrays, altering the first argument.
              %pre
                %code.example $.merge( [0,1,2], [2,3,4] )
              %h4 Result:
              %pre
                %code.results [0,1,2,2,3,4]
            #example-1
              %h4
                Example:
                %span.desc Merges two arrays, altering the first argument.
              %pre
                %code.example $.merge( [3,2,1], [4,3,2] )
              %h4 Result:
              %pre
                %code.results [3,2,1,4,3,2]
            #example-2
              %h4
                Example:
                %span.desc Merges two arrays, but uses a copy, so the original isn't altered.
              %pre
                %code.example
                  :preserve
                    var first = ['a','b','c'];
                    var second = ['d','e','f'];
                    $.merge( $.merge([],first), second);
                                        %h4 Result:
              %pre
                %code.results ["a","b","c","d","e","f"]
