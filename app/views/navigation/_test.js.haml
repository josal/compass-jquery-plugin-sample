:css
  #toolbar_botton{ padding: 0.3em; }
  #test_tree { width:auto; height:400px; overflow:auto; }
  #text{ height: 1.9em; margin: 0 0.4em 0 0; padding: 0.2em 0 0.2em 0.2em; }
  .ui-button{ font-size: 0.9em; }
  
:javascript
  $(function () {
    // Settings up the tree - using $(selector).jstree(options);
    // All those configuration options are documented in the _docs folder
    $("#test_tree")
        .jstree({ 
            // the list of plugins to include
            "plugins" : [ "themes", "json_data", "ui", "cookies", "search", "types" ],
            // Plugin configuration
  
            // I usually configure the plugin that handles the data first - in this case JSON as it is most common
            "json_data" : { 
                // I chose an ajax enabled tree - again - as this is most common, and maybe a bit more complex
                // All the options are the same as jQuery's except for `data` which CAN (not should) be a function
                "ajax" : {
                    // the URL to fetch the data
                    "url" : "/navigation/get_children",
                    // this function is executed in the instance's scope (this refers to the tree instance)
                    // the parameter is the node being loaded (may be -1, 0, or undefined when loading the root nodes)
                    "data" : function (n) { 
                        // the result is fed to the AJAX request `data` option
                        return { 
                            "id" : n.attr ? n.attr("id").replace("node_","") : 1 
                        }; 
                    }
                }
            },
            // Configuring the search plugin
            "search" : {
                // As this has been a common question - async search
                // Same as above - the `ajax` config option is actually jQuery's object (only `data` can be a function)
                "ajax" : {
                    "url" : "/navigation/search",
                    // You get the search string as a parameter
                    "data" : function (str) {
                        return { 
                            "format" : "json",
                            "search_str" : str 
                        }; 
                    }
                }
            },
            // Using types - most of the time this is an overkill
            // Still meny people use them - here is how
            "types" : {
                // I set both options to -2, as I do not need depth and children count checking
                // Those two checks may slow jstree a lot, so use only when needed
                "max_depth" : -2,
                "max_children" : -2,
                // I want only `drive` nodes to be root nodes 
                // This will prevent moving or creating any other type as a root node
                "valid_children" : [ "accordion" ],
                "types" : {
                    // The default type
                    "default" : {
                        // I want this type to have no children (so only leaf nodes)
                        // In my case - those are files
                        "valid_children" : "none"
                    },
                    // The `folder` type
                    "folder" : {
                        // can have files and other folders inside of it, but NOT `accordion` nodes
                        "valid_children" : [ "default", "folder" ]
                    },
                    // The `accordion` nodes 
                    "accordion" : {
                        // can have files and folders inside, but NOT other `accordion` nodes
                        "valid_children" : [ "default", "folder" ],
                        "icon" : {
                            "image" : "/images/jstree/accordion.png"
                        }//,
                        // those options prevent the functions with the same name to be used on the `accordion` type nodes
                        // internally the `before` event is used
                        //"start_drag" : false,
                        //"move_node" : false,
                        //"delete_node" : false,
                        //"remove" : false
                    }
                }
            },
            // the UI plugin - it handles selecting/deselecting/hovering nodes
            "themes" : {
                "theme" : "aero",
        		}            
        })
     
  });
  
  $(function() {
    $('#back').button();
  });
