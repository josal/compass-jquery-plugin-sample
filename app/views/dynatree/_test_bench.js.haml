:javascript
	$(function(){
		$("#tree").dynatree({
			children: [
				{title: "Add 100 nodes (flat, force update)...", isFolder: true, isLazy: true, mode: "add100_flat_u" },
				{title: "Add 100 nodes (flat)...", isFolder: true, isLazy: true, mode: "add100_flat" },
				{title: "Add 1.000 nodes (flat)...", isFolder: true, isLazy: true, mode: "add1000_flat" },
				{title: "Add 1.000 nodes (deep)...", isFolder: true, isLazy: true, mode: "add1000_deep" },
				{title: "Add 10.000 nodes (deep)...", isFolder: true, isLazy: true, mode: "add10000_deep" }
			],
			onSelect: function(dtnode) {
				alert("You selected " + dtnode.data.title);
			},
			onLazyRead: function(dtnode) {
				var tree = dtnode.tree;
				logMsg("Benchmarking mode='" + dtnode.data.mode + "'...");
				switch( dtnode.data.mode ) {
					case "add100_flat_u":
						addNodes(dtnode, 100, 0, 0, true)
						break;
					case "add100_flat":
						addNodes(dtnode, 100, 0, 0)
						break;
					case "add1000_flat":
						addNodes(dtnode, 1000, 0, 0)
						break;
					case "add1000_deep":
						addNodes(dtnode, 10, 10, 10)
						break;
					case "add10000_deep":
						addNodes(dtnode, 10, 100, 10)
						break;
				}
				//dtnode.setLazyNodeStatus(DTNodeStatus_Ok);
				logMsg("Benchmarking mode='" + dtnode.data.mode + "' done.");
				// Return true, to show we're finished
				return true;
			}
		});

		$("#btnClear").click(function(){
			var root = $("#tree").dynatree("getRoot");
			for(var i = 0; i<root.aChilds.length; i++)
				root.aChilds[i].removeChildren();
		});
	});

	function addNodes(dtnode, level1, level2, level3, forceUpdate) {
		if( forceUpdate != true )
			dtnode.tree.enableUpdate(false);
		
		var key;
		for (var i=0; i<level1; i++) {
			key = "" + (i+1);
			var f = dtnode.addChild({title: "Folder_" + key,
								   key: key,
								   isFolder: true
								   });
			for (var j=0; j<level2; j++) {
				key = "" + (i+1) + "." + (j+1);
				var d = f.addChild({title: "Node_" + key,
								  key: key
								  });
				for (var k=0; k<level3; k++) {
					key = "" + (i+1) + "." + (j+1) + "." + (k+1);
					d.addChild({title: "Node_" + key,
							  key: key
							  });
				}
			}
		}
		dtnode.tree.enableUpdate(true);
	}
