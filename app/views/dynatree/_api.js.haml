:javascript
	$(function(){
		// Initialize the tree inside the <div>element.
		// The tree structure is read from the contained <ul> tag.
		$("#tree").dynatree({
			title: "Programming Sample",
			rootVisible: true,
			onActivate: function(dtnode) {
				$("#echoActive").text(dtnode.data.title);
				if( dtnode.data.url )
					window.open(dtnode.data.url, dtnode.data.target);
			},
			onDeactivate: function(dtnode) {
				$("#echoSelected").text("-");
			},
			onFocus: function(dtnode) {
				$("#echoFocused").text(dtnode.data.title);
			},
			onBlur: function(dtnode) {
				$("#echoFocused").text("-");
			},
			onLazyRead: function(dtnode){
				var fakeJsonResult = [
					{ title: 'Lazy node 1', isLazy: true },
					{ title: 'Simple node 2', select: true }
				];
				// alert ("Let's pretend we're using this AJAX response to load the branch:\n " + jsonResult);
				function fakeAjaxResponse() {
					return function() {
						dtnode.addChild(fakeJsonResult);
						// Remove the 'loading...' status:
						dtnode.setLazyNodeStatus(DTNodeStatus_Ok);
					};
				}
				window.setTimeout(fakeAjaxResponse(), 1500);
			}
		});

		$("#btnAddCode").click(function(){
			// Sample: add an hierarchic branch using code.
			// This is how we would add tree nodes programatically
			var rootNode = $("#tree").dynatree("getRoot");
			var childNode = rootNode.addChild({
				title: "Programatically addded nodes",
				tooltip: "This folder and all child nodes were added programmatically.",
				isFolder: true
			});
			childNode.addChild({
				title: "Document using a custom icon",
				icon: "customdoc1.gif"
			});
		});

		$("#btnAddObject").click(function(){
			// Sample: add an hierarchic branch using an array
			var obj = [
				{ title: 'Lazy node 1', isLazy: true },
				{ title: 'Lazy node 2', isLazy: true },
				{ title: 'Folder node 3', isFolder: true,
					children: [
						{ title: 'node 3.1' },
						{ title: 'node 3.2',
							children: [
								{ title: 'node 3.2.1' },
								{ title: 'node 3.2.2',
									children: [
										{ title: 'node 3.2.2.1' }
									]
								}
							]
						}
					]
				}
			];
			$("#tree").dynatree("getRoot").addChild(obj);
		});

		$("#btnActiveNode").click(function(){
			$("#tree").dynatree("getTree").activateKey("id4_3_2");
			//$("#tree").dynatree("getTree").getNodeByKey("id4_3_2").activate();
		});

		$("#btnShowActive").click(function(){
			var dtnode = $("#tree").dynatree("getActiveNode");
			if( dtnode )
				alert("Currently active: " + dtnode.data.title);
			else
				alert("No active node.");
		});

		$("#btnDisable").toggle(function(){
				$("#tree").dynatree("disable");
				$(this).text("Enable");
				return false;
			}, function(){
				$("#tree").dynatree("enable");
				$(this).text("Disable");
				return false;
			});
		$("#btnToggleExpand").click(function(){
			$("#tree").dynatree("getRoot").visit(function(dtnode){
				dtnode.toggleExpand();
			});
			return false;
		});
		$("#btnCollapseAll").click(function(){
			$("#tree").dynatree("getRoot").visit(function(dtnode){
				dtnode.expand(false);
			});
			return false;
		});
		$("#btnExpandAll").click(function(){
			$("#tree").dynatree("getRoot").visit(function(dtnode){
				dtnode.expand(true);
			});
			return false;
		});
	});
