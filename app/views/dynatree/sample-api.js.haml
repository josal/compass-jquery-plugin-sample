!!! Strict
%html
  %head
    %meta{ :content => "text/html; charset=ISO-8859-1", "http-equiv" => "content-type" }
      %title
        Dynatree - Example
      %script{ :src => "../lib/jquery/jquery.js", :type => "text/javascript" }
      %script{ :src => "../lib/jquery/ui.core.js", :type => "text/javascript" }
      %script{ :src => "../lib/jquery/jquery.cookie.js", :type => "text/javascript" }
      %link{ :href => "../src/skin/ui.dynatree.css", :rel => "stylesheet", :type => "text/css" }
        %script{ :src => "../src/jquery.dynatree.js", :type => "text/javascript" }
        /
          Start_Exclude: This block is not part of the sample code
        %link{ :href => "prettify.css", :rel => "stylesheet" }
          %script{ :src => "prettify.js", :type => "text/javascript" }
          %link{ :href => "sample.css", :rel => "stylesheet", :type => "text/css" }
            %script{ :src => "sample.js", :type => "text/javascript" }
            /
              End_Exclude
            %script{ :type => "text/javascript" }
              $(function(){
              \// Initialize the tree inside the
              %div
                element.
                \// The tree structure is read from the contained
                %ul
                  tag.
                  $("#tree").dynatree({
                  title: "Programming Sample",
                  rootVisible: true,
                  onActivate: function(dtnode) {
                  $("#echoActive").text(dtnode.data.title);
                  if( dtnode.data.url )
                  window.open(dtnode.data.url, dtnode.data.target);
                  },
                  onDeactivate: function(dtnode) {
                  $("#echoSelected").text("-");
                  },
                  onFocus: function(dtnode) {
                  $("#echoFocused").text(dtnode.data.title);
                  },
                  onBlur: function(dtnode) {
                  $("#echoFocused").text("-");
                  },
                  onLazyRead: function(dtnode){
                  var fakeJsonResult = [
                  { title: 'Lazy node 1', isLazy: true },
                  { title: 'Simple node 2', select: true }
                  ];
                  \//				alert ("Let's pretend we're using this AJAX response to load the branch:\n " + jsonResult);
                  function fakeAjaxResponse() {
                  return function() {
                  dtnode.addChild(fakeJsonResult);
                  \// Remove the 'loading...' status:
                  dtnode.setLazyNodeStatus(DTNodeStatus_Ok);
                  };
                  }
                  window.setTimeout(fakeAjaxResponse(), 1500);
                  }
                  });
                  
                  $("#btnAddCode").click(function(){
                  \// Sample: add an hierarchic branch using code.
                  \// This is how we would add tree nodes programatically
                  var rootNode = $("#tree").dynatree("getRoot");
                  var childNode = rootNode.addChild({
                  title: "Programatically addded nodes",
                  tooltip: "This folder and all child nodes were added programmatically.",
                  isFolder: true
                  });
                  childNode.addChild({
                  title: "Document using a custom icon",
                  icon: "customdoc1.gif"
                  });
                  });
                  
                  $("#btnAddObject").click(function(){
                  \// Sample: add an hierarchic branch using an array
                  var obj = [
                  { title: 'Lazy node 1', isLazy: true },
                  { title: 'Lazy node 2', isLazy: true },
                  { title: 'Folder node 3', isFolder: true,
                  children: [
                  { title: 'node 3.1' },
                  { title: 'node 3.2',
                  children: [
                  { title: 'node 3.2.1' },
                  { title: 'node 3.2.2',
                  children: [
                  { title: 'node 3.2.2.1' }
                  ]
                  }
                  ]
                  }
                  ]
                  }
                  ];
                  $("#tree").dynatree("getRoot").addChild(obj);
                  });
                  
                  $("#btnActiveNode").click(function(){
                  $("#tree").dynatree("getTree").activateKey("id4.3.2");
                  \//			$("#tree").dynatree("getTree").getNodeByKey("id4.3.2").activate();
                  });
                  
                  $("#btnShowActive").click(function(){
                  var dtnode = $("#tree").dynatree("getActiveNode");
                  if( dtnode )
                  alert("Currently active: " + dtnode.data.title);
                  else
                  alert("No active node.");
                  });
                  
                  $("#btnDisable").toggle(function(){
                  $("#tree").dynatree("disable");
                  $(this).text("Enable");
                  return false;
                  }, function(){
                  $("#tree").dynatree("enable");
                  $(this).text("Disable");
                  return false;
                  });
                  $("#btnToggleExpand").click(function(){
                  $("#tree").dynatree("getRoot").visit(function(dtnode){
                  dtnode.toggleExpand();
                  });
                  return false;
                  });
                  $("#btnCollapseAll").click(function(){
                  $("#tree").dynatree("getRoot").visit(function(dtnode){
                  dtnode.expand(false);
                  });
                  return false;
                  });
                  $("#btnExpandAll").click(function(){
                  $("#tree").dynatree("getRoot").visit(function(dtnode){
                  dtnode.expand(true);
                  });
                  return false;
                  });
                  });
  %body.example
    %h1
      Dynatree API
    %p.description
      This example demonstrates the usage of some DynaTree and DynaTreeNode
      API functions.
    %p
      %a#btnExpandAll{ :href => "#" }
        Expand all
      \-
      %a#btnCollapseAll{ :href => "#" }
        Collapse all
      \-
      %a#btnToggleExpand{ :href => "#" }
        Toggle expand
      %br
        %a#btnDisable{ :href => "#" }
          Disable
    #tree
      %ul
        %li
          This simple node (and the following) have been created from html.
          %li#id1{ :title => "This is item #1" }
            item1 with key and tooltip
            %li#id2
              item2 with key 'id2'
              %li#id3.folder
                Standard Folder with some children
                %ul
                  %li#id3.1
                    Sub-item 3.1
                    %li#id3.2
                      Sub-item 3.2
                %li#id4
                  item 4. Note that also non-folders (i.e. 'documents') may have child nodes
                  %ul
                    %li#id4.1
                      Sub-item 4.1
                      %li#id4.2
                        Sub-item 4.2
                        %li#id4.3
                          Sub-item 4.3
                          %ul
                            %li#id4.3.1
                              Sub-item 4.3.1
                              %li#id4.3.2
                                Sub-item 4.3.2
                                %ul
                                  %li#id4.3.2.1
                                    Sub-item 4.3.2.1
                                    %li#id4.3.2.2
                                      Sub-item 4.3.2.2
                          %li#id4.4
                            Sub-item 4.4
                  %li#id5.expanded.folder
                    Advanced examples
                    %ul
                      %li{ :data => "key: 'node5.1'" }
                        item5.1: Using data attribute as an alternative way to specify a key.
                        %li{ :data => "key: 'node5.3', isFolder: true" }
                          item5.1: Using data attribute as an alternative way to specify a folder.
                          %li#id5.2
                            Sub-item 5.2
                            %li
                              Item without a key. Keys are optional (generated automatically), but may be used in the callbacks
    %div
      Active node:
      %span#echoActive
        \-
    %div
      Focused node:
      %span#echoFocused
        \-
    %p
      %button#btnAddCode
        Add nodes programmatically
      %button#btnAddObject
        Add nodes using arrays
      %button#btnActiveNode
        Activate item id4.3.2
      %button#btnShowActive
        Show active node...
    /
      Start_Exclude: This block is not part of the sample code
    %hr
      %p.sample-links.no_code
        %a.hideInsideFS{ :href => "http://dynatree.googlecode.com" }
          jquery.dynatree.js project home
        %a.hideOutsideFS{ :href => "#" }
          Link to this page
        %a.hideInsideFS{ :href => "samples.html" }
          Example Browser
        %a.codeExample{ :href => "#" }
          View source code
      /
        End_Exclude
