!!! Strict
%html
  %head
    %meta{ :content => "text/html; charset=ISO-8859-1", "http-equiv" => "content-type" }
      %title
        Dynatree - Example
      %script{ :src => "../lib/jquery/jquery.js", :type => "text/javascript" }
      %script{ :src => "../lib/jquery/ui.core.js", :type => "text/javascript" }
      %script{ :src => "../lib/jquery/jquery.cookie.js", :type => "text/javascript" }
      %link{ :href => "../src/skin/ui.dynatree.css", :rel => "stylesheet", :type => "text/css" }
        %script{ :src => "../src/jquery.dynatree.js", :type => "text/javascript" }
        /
          Start_Exclude: This block is not part of the sample code
        %link{ :href => "prettify.css", :rel => "stylesheet" }
          %script{ :src => "prettify.js", :type => "text/javascript" }
          %link{ :href => "sample.css", :rel => "stylesheet", :type => "text/css" }
            %script{ :src => "sample.js", :type => "text/javascript" }
            /
              End_Exclude
            %script{ :type => "text/javascript" }
              var _activeKey = null;
              $(function(){
              
              $("#tree").ajaxComplete(function(event, XMLHttpRequest, ajaxOptions) {
              _log("debug", "ajaxComplete: %o", this); // dom element listening
              });
              
              \// --- Initialize sample trees
              $("#tree").dynatree({
              title: "Lazy loading sample",
              rootVisible: true,
              minExpandLevel: 0, // 1: root node is not collapsible
              persist: true,
              checkbox: true,
              selectMode: 3,
              onPostInit: function(isReloading, isError) {
              \//				alert("reloading: "+isReloading+", error:"+isError);
              logMsg("onPostInit(%o, %o) - %o", isReloading, isError, this);
              \// Re-fire onActivate, so the text is updated
              this.reactivate();
              },
              fx: { height: "toggle", duration: 200 },
              \// initAjax is hard to fake, so we pass the children as object array:
              initAjax: {url: "http://127.0.0.1:8001",
              dataType: "jsonp", // Enable JSONP, so this sample can be run from the local file system against a localhost server
              data: {key: "",
              sleep: 1,
              depth: 3,
              mode: "baseFolders"
              },
              addExpandedKeyList: true // Send list of expanded keys, so the webservice can deliver these children also
              },
              onLazyRead: function(dtnode){
              dtnode.appendAjax(
              {url: "http://127.0.0.1:8001",
              dataType: "jsonp", // Enable JSONP, so this sample can be run from the local file system against a localhost server
              data: {key: dtnode.data.key,
              sleep: 1,
              mode: "branch"
              }
              });
              },
              onActivate: function(dtnode) {
              $("#echoActive").text(dtnode.data.tooltip + ", key=" + dtnode.data.key);
              _activeKey = dtnode.data.key;
              }
              });
              
              $("#btnReload").click(function(){
              $("#tree").dynatree("getTree").reload();
              return false;
              });
              $("#btnReloadNode").click(function(){
              $("#tree").dynatree("getTree").getNodeByKey(_activeKey).reload();
              return false;
              });
              
              
              });
  %body.example
    %h1
      Example: Lazy loading
    %p.description
      Using
      %code
        initAjax
      option to initialize the tree using Ajax.
      %br
        The folders have the
        %code
          isLazy
        option set, so that they are also
        loaded 'on demand', when expanded.
        %br
          %br
            Using
            %code
              persist: true
            and
            %code
              initAjax: { addExpandedKeyList: true }
            we also support 'lazy persistence' (which has to be supported by the
            web service, of course).
            %br
              %br
                Note:
                %br
                  This sample assumes that a Dynatree Web Service is running at http://127.0.0.1:8001.
                  %br
                    See
                    %a{ :href => "dynatree_server.py" }
                      dynatree_server.py
                    for a sample
                    server implementation.
                    %br
                      %br
                        Note also:
                        %br
                          We have to enable JSONP using the option
                          %code
                            initAjax: { dataType: 'jsonp' }
                          ,
                          because Ajax calls will fail, if the originating HTML page and the web
                          service do not reside on the same host.
                          %br
                            In our case may have this sample page on the local file system and the
                            web service runs on 127.0.0.1.
    #tree
      /
        When using initAjax, it may be nice to put a throbber here, that spins until the initial content is loaded:
      Loading...
    %div
      Active node:
      %span#echoActive
        \-
    %p
      %button#btnReload
        Reload tree
      %button#btnReloadNode
        Reload active node
    /
      Start_Exclude: This block is not part of the sample code
    %hr
      %p.sample-links.no_code
        %a.hideInsideFS{ :href => "http://dynatree.googlecode.com" }
          jquery.dynatree.js project home
        %a.hideOutsideFS{ :href => "#" }
          Link to this page
        %a.hideInsideFS{ :href => "samples.html" }
          Example Browser
        %a.codeExample{ :href => "#" }
          View source code
      /
        End_Exclude
