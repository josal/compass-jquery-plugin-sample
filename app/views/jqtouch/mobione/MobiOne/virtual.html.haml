!!! Strict
/ saved from url=(0068)http://www.genuitec.com/m/touch-demos/virtual-light-table/index.html
%HTML{:lang => "en", "xml:lang" => "en", :xmlns => "http://www.w3.org/1999/xhtml"}
  %HEAD
    %META{:content => "text/html; charset=UTF-8", "http-equiv" => "Content-Type"}
      %META{:content => "user-scalable=no, width=device-width", :name => "viewport"}
        %TITLE virtual light table
        %SCRIPT{:charset => "utf-8", :src => "./virtual light table_files/multitouch-fake.js", :type => "text/javascript"}
        %SCRIPT{:charset => "utf-8", :type => "text/javascript"}
          var zIndexCount = 1;
          var moving = {};
          function touchHandler(e) {
          if (e.type == "touchstart") {
          for (var i = 0; i < e.touches.length; i++) {
          \// for each "movable" touch event:
          if (e.touches[i].target.className == "movable") {
          var id = e.touches[i].identifier;
          
          \// record initial data in the "moving" hash
          moving[id] = {
          identifier: id,
          target:   	e.touches[i].target,
          mouse:		{ x: e.touches[i].clientX, y: e.touches[i].clientY },
          position:	{ x: e.touches[i].target.xfmTX, y: e.touches[i].target.xfmTY },
          rotation: 	e.touches[i].target.xfmR,
          scale: 		e.touches[i].target.xfmS
          };
          
          \// move to the front
          moving[id].target.style.zIndex = zIndexCount++;
          
          \// reset rotate/scale mode to off
          moving[id].rotateScaleMode = false;
          }
          }
          }
          else if (e.type == "touchmove") {
          \// if there are two touchs and both are on the *same* element, we're in rotate/scale mode
          if (e.touches.length == 2 && e.touches[0].target == e.touches[1].target) {
          var idA = e.touches[0].identifier,
          idB = e.touches[1].identifier;
          
          \// if we've previously recorded initial rotate/scale mode data:
          if (moving[idA].rotateScaleMode && moving[idB].rotateScaleMode) {
          \// calculate translation, rotation, and scale
          moving[idA].target.xfmTX = ((moving[idA].positionCenter.x - moving[idA].mouseCenter.x) + ((e.touches[0].clientX + e.touches[1].clientX) / 2));
          moving[idA].target.xfmTY = ((moving[idA].positionCenter.y - moving[idA].mouseCenter.y) + ((e.touches[0].clientY + e.touches[1].clientY) / 2));
          moving[idA].target.xfmR = moving[idA].rotation + e.rotation;
          moving[idA].target.xfmS = moving[idA].scale * e.scale;
          
          updateTransform(moving[idA].target);
          }
          else {
          \// set rotate/scale mode to on
          moving[idA].rotateScaleMode	= moving[idB].rotateScaleMode	= true;
          \// record initial rotate/scale mode data
          moving[idA].mouseCenter		= moving[idB].mouseCenter		= {
          x: (e.touches[0].clientX + e.touches[1].clientX) / 2,
          y: (e.touches[0].clientY + e.touches[1].clientY) / 2,
          }
          moving[idA].positionCenter	= moving[idB].positionCenter	= {
          x: moving[idA].target.xfmTX,
          y: moving[idA].target.xfmTY
          }
          }
          }
          else {
          for (var i = 0; i < e.touches.length; i++) {
          var id = e.touches[i].identifier;
          
          \// for each touch event:
          if (moving[id]) {
          \// reset rotate/scale mode to off
          moving[id].rotateScaleMode = false;
          \// calculate translation, leave rotation and scale alone
          moving[id].target.xfmTX = ((moving[id].position.x - moving[id].mouse.x) + e.touches[i].clientX);
          moving[id].target.xfmTY = ((moving[id].position.y - moving[id].mouse.y) + e.touches[i].clientY);
          updateTransform(moving[id].target);
          }
          }
          }
          }
          else if (e.type == "touchend" || e.type == "touchcancel") {
          \// clear each from the "moving" hash
          for (var i = 0; i < e.touches.length; i++)
          delete moving[e.touches[i].identifier];
          }
          
          e.preventDefault();
          }
          
          \// set the transform style property based on xfm element properties
          function updateTransform(element) {
          element.style['-webkit-transform'] =
          'translate('+element.xfmTX+'px,'+element.xfmTY+'px) '+
          'scale('+element.xfmS+') '+
          'rotate('+element.xfmR+'deg)';
          }
          
          \// callback for json Flickr API:
          function jsonFlickrApi(data) {
          for (var i = 0; i < data.photos.photo.length; i++) {
          var p = data.photos.photo[i],
          img = document.createElement("img");
          img.src = 'http://farm'+p.farm+'.static.flickr.com/'+p.server+'/'+p.id+'_'+p.secret+'_m.jpg';
          img.className = "movable";
          img.xfmTX = Math.random()*(window.innerWidth-240);
          img.xfmTY = Math.random()*(window.innerHeight-240);
          img.xfmR = Math.random()*180-90;
          img.xfmS = Math.random()/2+0.5;
          img.setAttribute("style", "position: absolute; top: 0px; left: 0px;");
          document.body.appendChild(img);
          updateTransform(img);
          }
          }
          
          function init() {
          \// touch event listeners
          document.addEventListener("touchstart", touchHandler, false);
          document.addEventListener("touchmove", touchHandler, false);
          document.addEventListener("touchend", touchHandler, false);
          document.addEventListener("touchcancel", touchHandler, false);
          
          \// get the 10 latest "interesting images" from Flickr
          var flickrApiCall = document.createElement("script");
          document.body.appendChild(flickrApiCall);
          flickrApiCall.src = 'http://api.flickr.com/services/rest/?method=flickr.interestingness.getList&api_key=856affa07586845de6fcbfb82520aa3e&per_page='+10+'&format=json';
          }
  %BODY{:onload => "init();", :style => "width: 100%; height: 100%; background-color: black;"}
    %SCRIPT{:src => "./virtual light table_files/saved_resource"}
    %IMG.movable{:src => "./virtual light table_files/4693188294_eba098f5a6_m.jpg", :style => "position: absolute; top: 0px; left: 0px; -webkit-transform: translate(1109.65px, 541.583px) scale(0.721386) rotate(-47.9455deg); "}
      %IMG.movable{:src => "./virtual light table_files/4693243154_46db26c6ef_m.jpg", :style => "position: absolute; top: 0px; left: 0px; -webkit-transform: translate(173.44px, 456.079px) scale(0.690233) rotate(43.5718deg); "}
        %IMG.movable{:src => "./virtual light table_files/4692842051_083d0707e1_m.jpg", :style => "position: absolute; top: 0px; left: 0px; -webkit-transform: translate(1068.77px, 92.9505px) scale(0.987721) rotate(-66.0803deg); "}
          %IMG.movable{:src => "./virtual light table_files/4693132290_b0d6c234f1_m.jpg", :style => "position: absolute; top: 0px; left: 0px; -webkit-transform: translate(1253.46px, 571.149px) scale(0.803955) rotate(54.2868deg); "}
            %IMG.movable{:src => "./virtual light table_files/4693768238_878a5cc829_m.jpg", :style => "position: absolute; top: 0px; left: 0px; -webkit-transform: translate(591.841px, 197.585px) scale(0.818049) rotate(79.5447deg); "}
              %IMG.movable{:src => "./virtual light table_files/4693319989_b4a1d39e1c_m.jpg", :style => "position: absolute; top: 0px; left: 0px; -webkit-transform: translate(187.789px, 113.336px) scale(0.718036) rotate(65.5006deg); "}
                %IMG.movable{:src => "./virtual light table_files/4693295487_d61834e5d4_m.jpg", :style => "position: absolute; top: 0px; left: 0px; -webkit-transform: translate(1387.18px, 456.254px) scale(0.676637) rotate(55.3122deg); "}
                  %IMG.movable{:src => "./virtual light table_files/4693539175_61e4d071bb_m.jpg", :style => "position: absolute; top: 0px; left: 0px; -webkit-transform: translate(975.053px, 150.209px) scale(0.718104) rotate(-68.4715deg); "}
                    %IMG.movable{:src => "./virtual light table_files/4693298803_44d00ea109_m.jpg", :style => "position: absolute; top: 0px; left: 0px; -webkit-transform: translate(708.713px, 513.589px) scale(0.940274) rotate(-52.9388deg); "}
                      %IMG.movable{:src => "./virtual light table_files/4692424679_d6fe88f46f_m.jpg", :style => "position: absolute; top: 0px; left: 0px; -webkit-transform: translate(910.157px, 391.977px) scale(0.877374) rotate(82.1379deg); "}/
