<!doctype html>
%html
  %head
    %title
      jQuery UI Autocomplete Combobox Demo
    %link{ :href => "../../themes/base/jquery.ui.all.css", :rel => "stylesheet", :type => "text/css" }
    %script{ :type => "text/javascript", :src => "../../jquery-1.4.2.js" }
    %script{ :type => "text/javascript", :src => "../../ui/jquery.ui.core.js" }
    %script{ :type => "text/javascript", :src => "../../ui/jquery.ui.widget.js" }
    %script{ :type => "text/javascript", :src => "../../ui/jquery.ui.button.js" }
    %script{ :type => "text/javascript", :src => "../../ui/jquery.ui.position.js" }
    %script{ :type => "text/javascript", :src => "../../ui/jquery.ui.autocomplete.js" }
    %link{ :href => "../demos.css", :rel => "stylesheet", :type => "text/css" }
    %script{ :type => "text/javascript" }
      (function($) {
      $.widget("ui.combobox", {
      _create: function() {
      var self = this;
      var select = this.element.hide();
      var input = $("
      %input
        ")
        \.insertAfter(select)
        \.autocomplete({
        source: function(request, response) {
        var matcher = new RegExp(request.term, "i");
        response(select.children("option").map(function() {
        var text = $(this).text();
        if (!request.term || matcher.test(text))
        return {
        id: $(this).val(),
        label: text.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + request.term.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi, "\\$1") + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "
        %strong
          $1
        "),
        value: text
        };
        }));
        },
        delay: 0,
        select: function(e, ui) {
        if (!ui.item) {
        \// remove invalid value, as it didn't match anything
        $(this).val("");
        return false;
        }
        $(this).focus();
        select.val(ui.item.id);
        self._trigger("selected", null, {
        item: select.find("[value='" + ui.item.id + "']")
        });
        
        },
        minLength: 0
        })
        \.addClass("ui-widget ui-widget-content ui-corner-left");
        $("
        %button
          \&nbsp;
        ")
        \.insertAfter(input)
        \.button({
        icons: {
        primary: "ui-icon-triangle-1-s"
        },
        text: false
        }).removeClass("ui-corner-all")
        \.addClass("ui-corner-right ui-button-icon")
        \.position({
        my: "left center",
        at: "right center",
        of: input,
        offset: "-1 0"
        }).css("top", "")
        \.click(function() {
        \// close if already visible
        if (input.autocomplete("widget").is(":visible")) {
        input.autocomplete("close");
        return;
        }
        \// pass empty string as value to search for, displaying all results
        input.autocomplete("search", "");
        input.focus();
        });
        }
        });
        
        })(jQuery);
        
        $(function() {
        $("select").combobox();
        });
    %style
      \/* TODO shouldn't be necessary */
      \.ui-button-icon-only .ui-button-text { padding: 0; }
  %body
    .demo
      .ui-widget
        %label
          Your preferred programming language:
        %select
          %option{ :value => "a" }
            asp
          %option{ :value => "c" }
            c
          %option{ :value => "cpp" }
            c++
          %option{ :value => "cf" }
            coldfusion
          %option{ :value => "g" }
            groovy
          %option{ :value => "h" }
            haskell
          %option{ :value => "j" }
            java
          %option{ :value => "js" }
            javascript
          %option{ :value => "p1" }
            pearl
          %option{ :value => "p2" }
            php
          %option{ :value => "p3" }
            python
          %option{ :value => "r" }
            ruby
          %option{ :value => "s" }
            scala
    /
      End demo
    .demo-description
      %p
        A custom widget built by composition of Autocomplete and Button. You can either type something into the field to get filtered suggestions based on your input, or use the button to get the full list of selections.
      %p
        The input is read from an existing select-element for progressive enhancement, passed to Autocomplete with a customized source-option.
    /
      End demo-description
