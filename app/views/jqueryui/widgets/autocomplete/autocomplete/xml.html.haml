<!doctype html>
%html
  %head
    %title
      jQuery UI Autocomplete Remote datasource demo
    %link{ :href => "../../themes/base/jquery.ui.all.css", :rel => "stylesheet", :type => "text/css" }
    %script{ :type => "text/javascript", :src => "../../jquery-1.4.2.js" }
    %script{ :type => "text/javascript", :src => "../../ui/jquery.ui.core.js" }
    %script{ :type => "text/javascript", :src => "../../ui/jquery.ui.widget.js" }
    %script{ :type => "text/javascript", :src => "../../ui/jquery.ui.position.js" }
    %script{ :type => "text/javascript", :src => "../../ui/jquery.ui.autocomplete.js" }
    %link{ :href => "../demos.css", :rel => "stylesheet", :type => "text/css" }
    %script{ :type => "text/javascript" }
      $(function() {
      function log(message) {
      $("
      %div
      ").text(message).prependTo("#log");
      $("#log").attr("scrollTop", 0);
      }
      
      $.ajax({
      url: "london.xml",
      dataType: "xml",
      success: function(xmlResponse) {
      var data = $("geoname", xmlResponse).map(function() {
      return {
      value: $("name", this).text() + ", " + ($.trim($("countryName", this).text()) || "(unknown country)"),
      id: $("geonameId", this).text()
      };
      }).get();
      $("#birds").autocomplete({
      source: data,
      minLength: 0,
      select: function(event, ui) {
      log(ui.item ? ("Selected: " + ui.item.value + ", geonameId: " + ui.item.id) : "Nothing selected, input was " + this.value);
      }
      });
      }
      })
      
      });
  %body
    .demo
      .ui-widget
        %label{ :for => "birds" }
          London matches:
        %input#birds
      .ui-widget{ :style => "margin-top:2em; font-family:Arial" }
        Result:
        #log.ui-widget-content{ :style => "height: 200px; width: 300px; overflow: auto;" }
    /
      End demo
    .demo-description
      %p
        This demo shows how to retrieve some XML data, parse it using jQuery's methods, then provide it to the autocomplete as the datasource.
      %p
        This should also serve as a reference on how to parse a remote XML datasource - the parsing would just happen for each request within the source-callback.
    /
      End demo-description
