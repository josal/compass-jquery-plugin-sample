!!! Strict
%html{:xmlns => "http://www.w3.org/1999/xhtml"}
  %head
    %meta{:content => "text/html; charset=utf-8", "http-equiv" => "Content-Type"}/
    %title jsTree v.1.0 - checkbox documentation
    %script{:src => "../js/jquery.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.cookie.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.hotkeys.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.jstree.js", :type => "text/javascript"}
    %link{:href => "syntax/!style.css", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "!style.css", :rel => "stylesheet", :type => "text/css"}/
    %script{:src => "syntax/!script.js", :type => "text/javascript"}
  %body
    #container
      %h1 jsTree v.1.0 - checkbox plugin
      %h2 Description
      #description
        %p
          The
          %code checkbox
          plugin makes multiselection possible using three-state checkboxes.
      %h2#configuration Configuration
      .panel.configuration
        %p No configuration possible
      %h2#demos Demos
      .panel
        %h3 Using the checkbox plugin - all you need to do is include it in the list of active plugins.
        #demo1.demo
          %ul
            %li#phtml_1
              %a{:href => "#"} Root node 1
              %ul
                %li#phtml_2.jstree-checked
                  %a{:href => "#"} Child node 1
                %li#phtml_3
                  %a{:href => "#"} Child node 2
            %li#phtml_4
              %a{:href => "#"} Root node 2
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#demo1").jstree({
          "plugins" : [ "themes", "html_data", "checkbox" ]
          });
          });
      %h2#api API
      .panel.api
        %p
          The checkbox plugin maps UI's
          %a{:href => "ui.html#get_selected"} get_selected function
          to its own
          %a{:href => "#get_checked"} get_checked function
          and overwrites the
          = succeed "." do
            %a{:href => "ui.html#reselect"} UI reselect function
          It also disables the
          = succeed "," do
            %code select_node
          %code deselect_node
          and
          %code deselect_all
          functions.
          %h3#_prepare_checkboxes ._prepare_checkboxes ( node )
          %p Inserts the checkbox icons on the node. Used internally.
          %ul.arguments
            %li
              %code.tp mixed
              %strong node
              %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
          %h3#_repair_state ._repair_state ( node )
          %p Repairs the checkbox state inside the node. Used internally.
          %ul.arguments
            %li
              %code.tp mixed
              %strong node
              %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
          %h3#change_state .change_state ( node , uncheck )
          %p
            Changes the state of a node. Used mostly internally - you'd be better off using the
            %code check_node
            and
            %code uncheck_node
            functions. Triggers an event.
          %ul.arguments
            %li
              %code.tp mixed
              %strong node
              %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
            %li
              %code.tp boolean
              %strong uncheck
              %p
                If set to
                %code true
                the node is unchecked, if set to
                %code false
                the node is checked, otherwise - the state is toggled.
          %h3#check_node .check_node ( node )
          %p Checks a node.
          %ul.arguments
            %li
              %code.tp mixed
              %strong node
              %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
          %h3#uncheck_node .uncheck_node ( node )
          %p Unchecks a node.
          %ul.arguments
            %li
              %code.tp mixed
              %strong node
              %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
          %h3#check_all .check_all ( )
          %p Checks all nodes.
          %h3#uncheck_all .uncheck_all ( )
          %p Unchecks all nodes.
          %h3#is_checked .is_checked ( node )
          %p Checks if a node is checked. Returns boolean.
          %ul.arguments
            %li
              %code.tp mixed
              %strong node
              %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
          %div{:style => "height:1px; visibility:hidden; overflow:hidden;"}
            %span#get_unchecked  
          %h3#get_checked .get_checked ( context ), .get_unchecked ( context )
          %p Both functions return jQuery collections.
          %ul.arguments
            %li
              %code.tp mixed
              %strong context
              %p This can be a DOM node, jQuery node or selector pointing to an element within the tree. If specified only nodes inside the specified context are returned, otherwise the whole tree is searched.
          %div{:style => "height:1px; visibility:hidden; overflow:hidden;"}
            %span#hide_checkboxes  
          %h3#show_checkboxes .show_checkboxes ( ), .get_unchecked ( )
          %p Show or hide the checkbox icons.
