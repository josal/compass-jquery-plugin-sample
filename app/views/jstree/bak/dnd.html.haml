!!! Strict
%html{:xmlns => "http://www.w3.org/1999/xhtml"}
  %head
    %meta{:content => "text/html; charset=utf-8", "http-equiv" => "Content-Type"}/
    %title jsTree v.1.0 - dnd documentation
    %script{:src => "../js/jquery.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.cookie.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.hotkeys.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.jstree.js", :type => "text/javascript"}
    %link{:href => "syntax/!style.css", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "!style.css", :rel => "stylesheet", :type => "text/css"}/
    %script{:src => "syntax/!script.js", :type => "text/javascript"}
  %body
    #container
      %h1 jsTree v.1.0 - drag'n'drop plugin
      %h2 Description
      #description
        %p
          The
          %code dnd
          plugin enables drag'n'drop support for jstree, also using foreign nodes and drop targets.
      %h2#configuration Configuration
      .panel.configuration
        %h3 copy_modifier
        %p.meta
          A string. Default is
          = succeed "." do
            %code "ctrl"
        %p
          The special key used to make a drag copy instead of move (
          %code> "ctrl"
          ,
          = succeed "," do
            %code "shift"
          = succeed "," do
            %code "alt"
          = succeed ")." do
            %code "meta"
        %h3 check_timeout
        %p.meta
          A number. Default is
          = succeed "." do
            %code 200
        %p
          The number of milliseconds to wait before checking if a move is valid upon hovering a node (while dragging).
          %code 200
          is a reasonable value - a higher number means better performance but slow feedback to the user, a lower number means lower performance (possibly) but the user will get feedback faster.
        %h3 open_timeout
        %p.meta
          A number. Default is
          = succeed "." do
            %code 500
        %p
          The number of milliseconds to wait before opening a hovered if it has children (while dragging). This means that the user has to stop over the node for half a second in order to trigger the open operation. Keep in mind that a low value in combination with async data could mean a lot of unneeded traffic, so
          %code 500
          is quite reasonable.
        %h3 drop_target
        %p.meta
          A string (jQuery selector) (or
          = succeed ")." do
            %code false
          Default is
          = succeed "." do
            %code ".jstree-drop"
        %p
          A jquery selector matching all drop targets (you can also use the comma
          %code ,
          in the string to specify multiple valid targets). If set to
          %code false
          drop targets are disabled.
        %h3 drop_check
        %p.meta
          A function. Default is
          = succeed "." do
            %code function (data) { return true; }
        %p
          Return
          %code false
          to mark the move as invalid, otherwise return
          = succeed "." do
            %code true
          The
          %code data
          parameter is as follows:
        %p{:style => "margin-left:2em;"}
          %code data.o
          \- the object being dragged
        %p{:style => "margin-left:2em;"}
          %code data.r
          \- the drop target
        %h3 drop_finish
        %p.meta
          A function. Default is
          = succeed "." do
            %code $.noop
        %p Gets executed after a valid drop, you get one parameter, which is as follows:
        %p{:style => "margin-left:2em;"}
          %code data.o
          \- the object being dragged
        %p{:style => "margin-left:2em;"}
          %code data.r
          \- the drop target
        %h3 drag_target
        %p.meta
          A string (jQuery selector) (or
          = succeed ")." do
            %code false
          Default is
          = succeed "." do
            %code ".jstree-draggable"
        %p
          A jquery selector matching all foreign nodes that can be dropped on the tree (you can also use the comma
          %code ,
          in the string to specify multiple valid foreign nodes). If set to
          %code false
          dragging foreign nodes is disabled.
        %h3 drag_check
        %p.meta
          A function. Default is
          = succeed "." do
            %code function (data) { return { after : false, before : false, inside : true }; }
        %p
          Return a boolean for each position. The
          %code data
          parameter is as follows:
        %p{:style => "margin-left:2em;"}
          %code data.o
          \- the foreign object being dragged
        %p{:style => "margin-left:2em;"}
          %code data.r
          \- the hovered node
        %h3 drag_finish
        %p.meta
          A function. Default is
          = succeed "." do
            %code $.noop
        %p Gets executed after a dropping a foreign element on a tree item, you get one parameter, which is as follows:
        %p{:style => "margin-left:2em;"}
          %code data.o
          \- the foreign object being dragged
        %p{:style => "margin-left:2em;"}
          %code data.r
          \- the target node
      %h2#demos Demos
      .panel
        %h3 Using the dnd plugin
        %p Drag stuff around!
        .jstree-drop{:style => "clear:both; border:5px solid green; background:lime; color:green; height:40px; line-height:40px; text-align:center; font-size:20px;"} I have the jstree-drop class
        .jstree-draggable{:style => "margin:10px 0; clear:both; border:5px solid navy; background:aqua; color:navy; height:40px; line-height:40px; text-align:center; font-size:20px;"} I have the jstree-draggable class
        #demo1.demo
          %ul
            %li#phtml_1
              %a{:href => "#"} Root node 1
              %ul
                %li#phtml_2
                  %a{:href => "#"} Child node 1
                %li#phtml_3
                  %a{:href => "#"} Child node 2
            %li#phtml_4
              %a{:href => "#"} Root node 2
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#demo1").jstree({
          "dnd" : {
          "drop_finish" : function () {
          alert("DROP");
          },
          "drag_check" : function (data) {
          if(data.r.attr("id") == "phtml_1") {
          return false;
          }
          return {
          after : false,
          before : false,
          inside : true
          };
          },
          "drag_finish" : function () {
          alert("DRAG OK");
          }
          },
          "plugins" : [ "themes", "html_data", "dnd" ]
          });
          });
        %h3 Reorder only demo
        #demo2.demo
          %ul
            %li#rhtml_1
              %a{:href => "#"} Root node 1
              %ul
                %li#rhtml_2
                  %a{:href => "#"} Child node 1
                %li#rhtml_3
                  %a{:href => "#"} Child node 2
                %li#rhtml_4
                  %a{:href => "#"} Child node 3
                %li#rhtml_5
                  %a{:href => "#"} Child node 4
            %li#rhtml_6
              %a{:href => "#"} Root node 2
            %li#rhtml_7
              %a{:href => "#"} Root node 3
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#demo2").jstree({
          "crrm" : {
          "move" : {
          "check_move" : function (m) {
          var p = this._get_parent(m.o);
          if(!p) return false;
          p = p == -1 ? this.get_container() : p;
          if(p === m.np) return true;
          if(p[0] && m.np[0] && p[0] === m.np[0]) return true;
          return false;
          }
          }
          },
          "dnd" : {
          "drop_target" : false,
          "drag_target" : false
          },
          "plugins" : [ "themes", "html_data", "crrm", "dnd" ]
          });
          });
      %h2#api API
      .panel.api
        %div{:style => "height:1px; visibility:hidden;"}
          %span#dnd_show &nbsp;
          %span#dnd_open &nbsp;
          %span#dnd_finish &nbsp;
          %span#dnd_enter &nbsp;
          %span#start_drag &nbsp;
        %h3#dnd_prepare .dnd_prepare ( ), .dnd_show ( ), .dnd_open ( ), .dnd_finish ( ), .dnd_enter ( ), .start_drag ( )
        %p All those functions are used internally only. If you want more information - examine the source code.
