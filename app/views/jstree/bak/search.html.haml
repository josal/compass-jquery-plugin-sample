!!! Strict
%html{:xmlns => "http://www.w3.org/1999/xhtml"}
  %head
    %meta{:content => "text/html; charset=utf-8", "http-equiv" => "Content-Type"}/
    %title jsTree v.1.0 - Search documentation
    %script{:src => "../js/jquery.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.cookie.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.hotkeys.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.jstree.js", :type => "text/javascript"}
    %link{:href => "syntax/!style.css", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "!style.css", :rel => "stylesheet", :type => "text/css"}/
    %script{:src => "syntax/!script.js", :type => "text/javascript"}
  %body
    #container
      %h1 jsTree v.1.0 - search plugin
      %h2 Description
      #description
        %p
          The
          %code search
          plugin enables searching for nodes whose title contains a given string, works on async trees too. All found nodes get the
          %code jstree-search
          class applied to their contained
          %code a
          nodes - you can use that class to style search results.
      %h2#configuration Configuration
      .panel.configuration
        %h3 case_insensitive
        %p.meta
          A boolean. Default is
          = succeed "." do
            %code false
        %p Whether to search in a case-insensitive manner or not.
        %h3 ajax
        %p.meta
          An object (or
          %code false
          if not used). Default is
          = succeed "." do
            %code false
        %p
          This object can be used to make a request to the server on each search - useful if you are using async trees. That way you can return an array of IDs that need to be loaded before the actual DOM search is performed (so that all the nodes that will match the search are loaded). For example if the user searches for "string", you get that on the server side, check the database and find out that there is a node containing that string. But the node is the child of some other node, etc - so in your response you must return the path to the node (without the node itself) as ids:
          = succeed "." do
            %code ["#root_node","#child_node_3"]
          This means that jstree will load those two nodes before doing the client side search, ensuring that your node will be visible.
        %p
          The ajax config object is pretty much the same as the
          = succeed "." do
            %a{:href => "http://api.jquery.com/jQuery.ajax/"} jQuery ajax settings object
        %p
          You can set the
          %code data
          option to a function, that will be executed in the current tree's scope (
          %code this
          will be the tree instance) and gets the search string as a paramater. Whatever you return in the function will be sent to the server as data.
        %p
          You can set the
          %code url
          option to a function, that will be executed in the current tree's scope (
          %code this
          will be the tree instance) and gets the search string as a paramater. Whatever you return in the function will be used as the URL of the ajax request.
        %p
          The
          %code error
          and
          %code success
          functions (if present) also fire in the context of the tree, and if you return a value in the
          %code success
          function it will be used as the array of IDs.
      %h2#demos Demos
      .panel
        %h3 Searching nodes
        %p Do not open the node - instead - just press the button.
        %input#search.button{:style => "", :type => "button", :value => "Search"}/
        #demo1.demo
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#search").click(function () {
          $("#demo1").jstree("search","TARGEt");
          });
          $("#demo1")
          \.jstree({
          "json_data" : {
          "data" : [
          {
          "attr" : { "id" : "root_node" },
          "data" : "A closed node",
          "state" : "closed"
          }
          ],
          "ajax" : {
          "url" : "_search_data.json",
          "data" : function (n) {
          return { id : n.attr ? n.attr("id") : 0 };
          }
          }
          },
          "search" : {
          "case_insensitive" : true,
          "ajax" : {
          "url" : "_search_result.json"
          }
          },
          "plugins" : [ "themes", "json_data", "search" ]
          })
          \.bind("search.jstree", function (e, data) {
          alert("Found " + data.rslt.nodes.length + " nodes matching '" + data.rslt.str + "'.");
          });
          });
      %h2#api API
      .panel.api
        %h3#search .search ( str , skip_async )
        %p Searches for nodes matching the supplied string. Triggers an event.
        %ul.arguments
          %li
            %code.tp string
            %strong str
            %p The string to search for.
          %li
            %code.tp boolean
            %strong skip_async
            %p
              If set to
              %code true
              \- skip the async search (if setup in the config). This is used mostly internally.
        %h3#clear_search .clear_search ( )
        %p Clears the current search. This function is automatically called when doing a new search. Triggers an event.
        %h3#_search_open ._search_open ( is_callback )
        %p Used internally if async is setup in the config. This functions loads the nodes returned by the server one by one.
