!!! Strict
%html{:xmlns => "http://www.w3.org/1999/xhtml"}
  %head
    %meta{:content => "text/html; charset=utf-8", "http-equiv" => "Content-Type"}/
    %title jsTree v.1.0 - languages documentation
    %script{:src => "../js/jquery.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.cookie.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.hotkeys.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.jstree.js", :type => "text/javascript"}
    %link{:href => "syntax/!style.css", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "!style.css", :rel => "stylesheet", :type => "text/css"}/
    %script{:src => "syntax/!script.js", :type => "text/javascript"}
  %body
    #container
      %h1 jsTree v.1.0 - languages plugin
      %h2 Description
      #description
        %p
          The
          %code languages
          plugin enables multilanguage trees. This means that each node has a specified number of titles - each in a different "language". Only one language set is visible at any given time. This is useful for maintaining the same structure in many languages (hence the name of the plugin)
      %h2#configuration Configuration
      .panel.configuration
        %p Expects an array of language codes. Each of the items is used as a CSS class name, so make sure you specify only valid CSS class name strings.  The first langauge will be visible onload. For example:
        %p
          %code [ "en", "de", "bg" ]
      %h2#demos Demos
      .panel
        %p
          Check your data plugin documentation (
          %a{:href => "html_data.html"}> html_data
          ,
          = succeed "," do
            %a{:href => "xml_data.html"} xml_data
          = succeed ")" do
            %a{:href => "json_data.html"} json_data
          or take a close look at these examples for information on how to specify multilanguage nodes.
        %h3 Using the languages plugin with HTML data
        %input#en_1.button{:style => "float:left;", :type => "button", :value => "en"}/
        %input#bg_1.button{:style => "float:left;", :type => "button", :value => "bg"}/
        %input#rename_1.button{:style => "float:left;", :type => "button", :value => "rename_1"}/
        %input#rename_2.button{:style => "", :type => "button", :value => "rename_2"}/
        #demo1.demo
          %ul
            %li#phtml_1
              %a.en{:href => "#"} Root node 1
              %a.bg{:href => "#"} Корен 1
              %ul
                %li#phtml_2
                  %a.en{:href => "#"} Child node 1
                  %a.bg{:href => "#"} Дете 1
                %li#phtml_3
                  %a.en{:href => "#"} Child node 2
                  %a.bg{:href => "#"} Дете 2
            %li#phtml_4
              %a.en{:href => "#"} Root node 2
              %a.bg{:href => "#"} Корен 2
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#en_1, #bg_1").click(function () {
          $("#demo1").jstree("set_lang", this.value);
          });
          $("#rename_1").click(function () {
          $("#demo1").jstree("rename_node", "#phtml_1", "Rename visible lang");
          });
          $("#rename_2").click(function () {
          $("#demo1").jstree("rename_node", "#phtml_1", "Rename `bg`", "bg");
          });
          $("#demo1").jstree({
          "languages" : [ "en", "bg" ],
          "plugins" : [ "themes", "html_data", "languages"]
          });
          });
      %h2#api API
      .panel.api
        %h3#set_lang .set_lang ( lang )
        %p Set the tree's visible language. Triggers an event.
        %ul.arguments
          %li
            %code.tp
              string
              = succeed "number" do
                %br/
            %strong lang
            %p Either the language code string (as specified in the config) or an index from the config array.
        %h3#get_lang .get_lang ( )
        %p Returns the name of the currently visible language.
        %h3#get_text .get_text ( node , lang )
        %p
          Returns the title of a node. Overwrites the
          %a{:href => "core.html#get_text"} get_text function
          from the core.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to the element whose title you need.
          %li
            %code.tp string
            %strong lang
            %p The language code string (as specified in the config) to get the title in. If you omit this - the currently visible language is used.
        %h3#set_text .set_text ( node , text , lang )
        %p
          Sets the title of a node. Overwrites the
          %a{:href => "core.html#set_text"} set_text function
          from the core. This is used internally - you should use
          = succeed "." do
            %a{:href => "core.html#rename_node"} rename_node
          Since
          %code rename_node
          uses
          %code set_text
          internally you can pass a language string as a third parameter to rename_node.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to the element whose title you want to change.
          %li
            %code.tp string
            %strong text
            %p The new title.
          %li
            %code.tp string
            %strong lang
            %p The language code string (as specified in the config) to get the title in. If you omit this - the currently visible language is used.
        %h3#_load_css ._load_css ( )
        %p used only internally to include the CSS necessary for the plugin onload.
        %h3#create_node .create_node ( obj , position , js , callback )
        %p
          Overwrites the
          %a{:href => "core.html#create_node"} create_node
          function from the core. To create a node with a few titles use an array for the
          %code data
          property of the
          %code js
          parameter:
        %p
          %code { "data" : [ { "title" : "EN title", language : "en" }, { "title" : "BG заглавие", language : "bg" } ] }
