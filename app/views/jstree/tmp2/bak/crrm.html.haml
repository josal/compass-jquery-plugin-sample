!!! Strict
%html{:xmlns => "http://www.w3.org/1999/xhtml"}
  %head
    %meta{:content => "text/html; charset=utf-8", "http-equiv" => "Content-Type"}/
    %title jsTree v.1.0 - CRRM documentation
    %script{:src => "../js/jquery.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.cookie.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.hotkeys.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.jstree.js", :type => "text/javascript"}
    %link{:href => "syntax/!style.css", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "!style.css", :rel => "stylesheet", :type => "text/css"}/
    %script{:src => "syntax/!script.js", :type => "text/javascript"}
  %body
    #container
      %h1 jsTree v.1.0 - CRRM plugin
      %h2 Description
      #description
        %p
          The
          %code CRRM
          plugin handles creating, renaming, removing and moving nodes by the user.
      %h2#configuration Configuration
      .panel.configuration
        %h3 input_width_limit
        %p.meta
          A number. Default is
          = succeed "." do
            %code 200
        %p When renaming (or creating) nodes the input for the text will autosize - this number sets the maximum size for the input.
        %h3 move
        %p.meta An object, containing various settings - see below for more.
        %h3 move.always_copy
        %p.meta
          %code> true
          ,
          %code false
          or
          = succeed "." do
            %code "multitree"
          Default is
          = succeed "." do
            %code false
        %p
          Defines how moves are handled - if set to
          %code true
          every move will be forced to a copy (leaving the original node in place). If set to
          %code "multitree"
          only moves between trees will be forced to a copy.
        %h3 move.open_onmove
        %p.meta
          A Boolean. Default is
          = succeed "." do
            %code true
        %p If set to true, when moving a node to a new, closed parent, the parent node will be opened when the move completes.
        %h3 move.default_position
        %p.meta
          A string or a number. Default is
          = succeed "." do
            %code "last"
        %p
          The default position to move to if no position is specified. This can be a zero based index to position the element at a specific point among the new parent's current children. You can also use one of these strings:
          = succeed "," do
            %code "before"
          = succeed "," do
            %code "after"
          = succeed "," do
            %code "inside"
          = succeed "," do
            %code "first"
          = succeed "." do
            %code "last"
        %h3 move.check_move
        %p.meta
          A function. Default is
          = succeed "." do
            %code function (m) { return true; }
        %p
          The callback function enabling you to prevent some moves - just return
          = succeed "." do
            %code false
          The
          %code m
          parameter is the move object generated by jstree. The object follows the structure described in
          = succeed "." do
            %a{:href => "core.html#_get_move"} ._get_move
      %h2#demos Demos
      .panel
        %h3 Creating nodes
        %input#create_1.button{:style => "float:left;", :type => "button", :value => "create_1"}/
        %input#create_2.button{:style => "float:left;", :type => "button", :value => "create_2"}/
        %input#create_3.button{:style => "", :type => "button", :value => "create_3"}/
        #demo1.demo
          %ul
            %li#phtml_1
              %a{:href => "#"} Root node 1
              %ul
                %li#phtml_2
                  %a{:href => "#"} Child node 1
                %li#phtml_3
                  %a{:href => "#"} Child node 2
            %li#phtml_4
              %a{:href => "#"} Root node 2
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#create_1").click(function () {
          $("#demo1").jstree("create");
          });
          $("#create_2").click(function () {
          $("#demo1").jstree("create","#phtml_1","first","Enter a new name");
          });
          $("#create_3").click(function () {
          $("#demo1").jstree("create",-1,false,"No rename",false,true);
          });
          $("#demo1").jstree({
          "ui" : {
          "initially_select" : [ "phtml_2" ]
          },
          "core" : { "initially_open" : [ "phtml_1" ] },
          "plugins" : [ "themes", "html_data", "ui", "crrm" ]
          });
          });
        %h3 Removing nodes
        %input#remove_1.button{:style => "float:left;", :type => "button", :value => "remove_1"}/
        %input#remove_2.button{:style => "", :type => "button", :value => "remove_2"}/
        #demo2.demo
          %ul
            %li#rhtml_1
              %a{:href => "#"} Root node 1
              %ul
                %li#rhtml_2
                  %a{:href => "#"} Child node 1
                %li#rhtml_3
                  %a{:href => "#"} Child node 2
            %li#rhtml_4
              %a{:href => "#"} Root node 2
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#remove_1").click(function () {
          $("#demo2").jstree("remove");
          });
          $("#remove_2").click(function () {
          $("#demo2").jstree("remove","#rhtml_1");
          });
          $("#demo2").jstree({
          "ui" : {
          "initially_select" : [ "rhtml_2" ]
          },
          "core" : { "initially_open" : [ "rhtml_1" ] },
          "plugins" : [ "themes", "html_data", "ui", "crrm" ]
          });
          });
        %h3 Renaming nodes
        %input#rename_1.button{:style => "float:left;", :type => "button", :value => "rename_1"}/
        %input#rename_2.button{:style => "", :type => "button", :value => "rename_2"}/
        #demo3.demo
          %ul
            %li#shtml_1
              %a{:href => "#"} Root node 1
              %ul
                %li#shtml_2
                  %a{:href => "#"} Child node 1
                %li#shtml_3
                  %a{:href => "#"} Child node 2
            %li#shtml_4
              %a{:href => "#"} Root node 2
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#rename_1").click(function () {
          $("#demo3").jstree("rename");
          });
          $("#rename_2").click(function () {
          $("#demo3").jstree("rename","#shtml_1");
          });
          $("#demo3").jstree({
          "ui" : {
          "initially_select" : [ "shtml_2" ]
          },
          "core" : { "initially_open" : [ "shtml_1" ] },
          "plugins" : [ "themes", "html_data", "ui", "crrm" ]
          });
          });
        %h3 Moving nodes
        %p
          %strong move_1
          uses the default position -
          %code "first"
        %p
          %strong move_2
          specifies a position -
          %code "before"
          \- meaning that the node specified as a first argument will come above the node specified as the second argument
        %p
          %strong move_3
          will never work, because of the specified
          %code check_move
          function which prevents the first root node from being moved
        %input#move_1.button{:style => "float:left;", :type => "button", :value => "move_1"}/
        %input#move_2.button{:style => "float:left;", :type => "button", :value => "move_2"}/
        %input#move_3.button{:style => "", :type => "button", :value => "move_3"}/
        #demo4.demo
          %ul
            %li#thtml_1
              %a{:href => "#"} Root node 1
              %ul
                %li#thtml_2
                  %a{:href => "#"} Child node 1
                %li#thtml_3
                  %a{:href => "#"} Child node 2
            %li#thtml_4
              %a{:href => "#"} Root node 2
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#move_1").click(function () {
          $("#demo4").jstree("move_node","#thtml_4","#thtml_1");
          });
          $("#move_2").click(function () {
          $("#demo4").jstree("move_node","#thtml_4","#thtml_1", "before");
          });
          $("#move_3").click(function () {
          $("#demo4").jstree("move_node","#thtml_1","#thtml_4");
          });
          $("#demo4").jstree({
          "crrm" : {
          "move" : {
          "default_position" : "first",
          "check_move" : function (m) { return (m.o[0].id === "thtml_1") ? false : true;  }
          }
          },
          "ui" : {
          "initially_select" : [ "thtml_2" ]
          },
          "core" : { "initially_open" : [ "thtml_1" ] },
          "plugins" : [ "themes", "html_data", "ui", "crrm" ]
          });
          });
      %h2#api API
      .panel.api
        %h3#_show_input ._show_input ( node , callback )
        %p Renders an input field in a node. Used only internally.
        %h3#rename .rename ( node )
        %p Sets a node in rename mode and when the user has entered changes, an event is triggered.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to an element within the tree. If you use the UI plugin - pass
              %code null
              to use the currently selected item.
        %h3#create .create ( node , position , js , callback , skip_rename )
        %p Creates a new node. Triggers an event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to the element you want to create in (or next to). If you use the UI plugin - pass
              %code null
              to use the currently selected item.
          %li
            %code.tp mixed
            %strong position
            %p
              The position of the newly created node. This can be a zero based index to position the element at a specific point among the current children. You can also pass in one of those strings:
              = succeed "," do
                %code "before"
              = succeed "," do
                %code "after"
              = succeed "," do
                %code "inside"
              = succeed "," do
                %code "first"
              = succeed "." do
                %code "last"
          %li
            %code.tp object
            %strong js
            %p The data for the newly created node. Consists of three keys:
            %p{:style => "margin-left:25px;"}
              %code.tp attr
              \- an object of attributes (same used for
              = succeed "." do
                %code jQuery.attr()
              You can omit this key;
              %br/
              %code.tp state
              \- a string - either
              %code "open"
              or
              = succeed "," do
                %code "closed"
              for a leaf node - omit this key;
              %br/
              %code.tp data
              \- a string or an object - if a string is passed it is used for the title of the node, if an object is passed there are two keys you can specify:
              %code attr
              and
              = succeed ";" do
                %code title
          %li
            %code.tp function
            %strong callback
            %p A function to be executed once the node is created. You'd be better off waiting for the event.
          %li
            %code.tp bool
            %strong skip_rename
            %p Skips the user input step. The node is created with the data you have supplied.
        %h3#remove .remove ( node )
        %p Removes a node. Triggers an event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to an element within the tree. If you use the UI plugin - pass
              %code null
              to use the currently selected items.
        %div{:style => "height:1px; visibility:hidden; overflow:hidden;"}
          %span#check_move  
        %h3#move_node .check_move ( ), .move_node ( )
        %p
          Both functions are overwritten from the
          %a{:href => "core.html#check_move"} core
          in order to implement the new functionality.
        %h3#cut .cut ( node )
        %p Cuts a node (prepares it for pasting).
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to an element within the tree. If you use the UI plugin - pass
              %code null
              to use the currently selected item.
        %h3#copy .copy ( node )
        %p Copies a node (prepares it for pasting).
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to an element within the tree. If you use the UI plugin - pass
              %code null
              to use the currently selected item.
        %h3#paste .paste ( node )
        %p Pastes copied or cut nodes inside a node.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to an element within the tree. If you use the UI plugin - pass
              %code null
              to use the currently selected item.
