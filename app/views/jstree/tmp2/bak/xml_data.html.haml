!!! Strict
%html{:xmlns => "http://www.w3.org/1999/xhtml"}
  %head
    %meta{:content => "text/html; charset=utf-8", "http-equiv" => "Content-Type"}/
    %title jsTree v.1.0 - xml_data documentation
    %script{:src => "../js/jquery.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.cookie.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.hotkeys.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.jstree.js", :type => "text/javascript"}
    %link{:href => "syntax/!style.css", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "!style.css", :rel => "stylesheet", :type => "text/css"}/
    %script{:src => "syntax/!script.js", :type => "text/javascript"}
  %body
    #container
      %h1 jsTree v.1.0 - xml_data plugin
      %h2 Description
      #description
        %p
          The
          %code xml_data
          plugin enables jsTree to convert XML objects to interactive trees (using XSL). The data (XML) can be set up in the config (as a string) or retrieved from a server (also ondemand).
        %p Two types of XML structures are supported - flat and nested:
        .code_f
          %pre{:class => "brush:xml;"}
            :preserve
              
              &lt;!-- FLAT --&gt;
              &lt;root&gt;
              	&lt;item id="root_1" parent_id="0" state="closed"&gt;
              		&lt;content&gt;
              			&lt;name&gt;&lt;![CDATA[Node 1]]&gt;&lt;/name&gt;
              		&lt;/content&gt;
              	&lt;/item&gt;
              	&lt;item id="node_2" parent_id="root_1"&gt;
              		&lt;content&gt;
              			&lt;name&gt;&lt;![CDATA[Node 2]]&gt;&lt;/name&gt;
              		&lt;/content&gt;
              	&lt;/item&gt;
              &lt;/root&gt;
              
              &lt;!-- NESTED --&gt;
              &lt;root&gt;
              	&lt;item id="xml_1"&gt;
              		&lt;content&gt;&lt;name&gt;&lt;![CDATA[Root node 1]]&gt;&lt;/name&gt;&lt;/content&gt;
              		&lt;item id="xml_2"&gt;
              			&lt;content&gt;&lt;name&gt;&lt;![CDATA[Child node 1]]&gt;&lt;/name&gt;&lt;/content&gt;
              		&lt;/item&gt;
              	&lt;/item&gt;
              &lt;/root&gt;
        %p
          Aside from nesting the only difference is the
          %code parent_id
          attribute used in
          = succeed "." do
            %code xml_flat
        %p
          %code parent_id
          defines the parent of the node in XML flat, use
          %code 0
          for root nodes. Also when using async - use
          %code 0
          for the first level.
        %p
          %code state
          defines the state of the node (
          %code open
          or
          = succeed ")." do
            %code closed
          You can omit it too - jstree will handle the data automatically - nodes with no children will be leaf nodes, nodes with children will be closed.
        %p
          All attributes you set on the
          %code item
          node will be transfered to the resulting
          %code li
          node. All attributes you set on the
          %code name
          node will be transfered to the resulting
          %code a
          node.
        %p
          If you are using the
          %a{:href => "languages.html"} languages plugin
          you can have multiple
          %code name
          nodes in a every
          %code item
          node, just set a
          %code language
          attribute on each one (
          %code> &lt;name language="en" ...
          ).
        %p.note Remember to always set the XML header on your XML files.
      %h2#configuration Configuration
      .panel.configuration
        %h3 data
        %p.meta
          A XML string (or
          %code false
          if not used). Default is
          = succeed "." do
            %code false
        %p Specifies the content to load into the container and convert to a tree.
        %h3 ajax
        %p.meta
          An object (or
          %code false
          if not used). Default is
          = succeed "." do
            %code false
        %p
          The ajax config object is pretty much the same as the
          = succeed "." do
            %a{:href => "http://api.jquery.com/jQuery.ajax/"} jQuery ajax settings object
        %p
          You can set the
          %code data
          option to a function, that will be executed in the current tree's scope (
          %code this
          will be the tree instance) and gets the node about to be open as a paramater (or
          %code -1
          for initial load). Whatever you return in the function will be sent to the server as data (so for example you can send the node's ID).
        %p
          You can set the
          %code url
          option to a function, that will be executed in the current tree's scope (
          %code this
          will be the tree instance) and gets the node about to be open as a paramater (or
          %code -1
          for initial load). Whatever you return in the
          %code url
          function will be used as the ajax URL (so that you can accomodate pretty paths such as /get_children/node_2).
        %p
          The
          %code error
          and
          %code success
          functions (if present) also fire in the context of the tree, and if you return a value in the
          %code success
          function it will be used to populate the tree - this can be useful if you want to somehow change what the server returned on the client side before it is displayed in the tree.
        %h3 correct_state
        %p.meta
          A Boolean. Default is
          = succeed "." do
            %code true
        %p
          If this option is set to
          %code true
          if an AJAX returns an empty result, the node that was about to be opened will be converted to a leaf node (the open icon will no longer be displayed).
        %h3 clean_node
        %p.meta
          A Boolean. Default is
          = succeed "." do
            %code false
        %p
          Set to true if node needs to be cleaned - usually you should leave this to
          = succeed "." do
            %code false
        %h3 xsl
        %p.meta
          A string. Default is
          = succeed "." do
            %code "flat"
        %p
          The type of structure you wiil be using - set either to
          %code "flat"
          or
          = succeed "." do
            %code "nest"
        %p.note
          %strong NOTE:
          = succeed "If" do
            %br/
          both
          %code data
          and
          %code ajax
          are set the initial tree is rendered from the
          %code data
          string. When opening a closed node (that has no loaded children) an AJAX request is made.
      %h2#demos Demos
      .panel
        %h3 Using the data config option (flat)
        #demo1.demo
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#demo1").jstree({
          "xml_data" : {
          "data" : "" +
          "
          %root>
            " +
            "
            %item#node_1>
              " +
              "
              %content>
                %name Root node 1
              " +
              "
            " +
            "
            %item>
              " +
              "
              %content>
                %name Root node 2
              " +
              "
            " +
            "
            %item{:parent_id => "node_1"}>
              " +
              "
              %content>
                %name Child node
              " +
              "
            " +
            "
          "
          },
          "plugins" : [ "themes", "xml_data" ]
          });
          });
        %h3 Using the ajax config option (nested)
        #demo2.demo
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#demo2").jstree({
          "xml_data" : {
          "ajax" : {
          "url" : "_xml_nest.xml"
          },
          "xsl" : "nest"
          },
          "plugins" : [ "themes", "xml_data" ]
          });
          });
        %h3 Using both the data &amp; ajax config options (flat)
        #demo4.demo
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#demo4").jstree({
          "xml_data" : {
          "data" : "" +
          "
          %root>
            " +
            "
            %item#node_1{:state => "closed"}>
              " +
              "
              %content>
                %name Root node 1
              " +
              "
            " +
            "
            %item>
              " +
              "
              %content>
                %name Root node 2
              " +
              "
            " +
            "
          ",
          "ajax" : {
          "url" : "_xml_flat.xml",
          "data" : function (n) {
          return {
          id : n.attr ? n.attr("id") : 0,
          rand : new Date().getTime()
          };
          }
          }
          },
          "plugins" : [ "themes", "xml_data" ]
          });
          });
      %h2#api API
      .panel.api
        %p
          Both dummy functions -
          %code _is_loaded
          and
          %code load_node
          are overwritten.
        %h3#load_node_xml .load_node_xml ( node , success_callback , error_callback )
        %p
          This function is called instead of
          = succeed "." do
            %code load_node
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to an element you want loaded. Use
              %code -1
              for root nodes.
          %li
            %code.tp function
            %strong success_callback
            %p
              A function to be executed once the node is loaded successfully - used internally. You should wait for the
              %code load_node
              event.
          %li
            %code.tp function
            %strong error_callback
            %p
              A function to be executed if the node is not loaded due to an error - used internally. You should wait for the
              %code load_node
              event.
        %h3#parse_xml .parse_xml ( data )
        %p This function converts XML strings or objects to the DOM structure required by jstree. Returns a jQuery object.
        %ul.arguments
          %li
            %code.tp mixed
            %strong data
            %p The XML string/object.
        %h3#get_xml .get_xml ( type , node , li_attr , a_attr , is_callback )
        %p This function returns an array of tree nodes converted back to XML.
        %ul.arguments
          %li
            %code.tp string
            %strong type
            %p
              Either
              %code "flat"
              or
              = succeed "." do
                %code "nest"
              Default is
              = succeed "." do
                %code "flat"
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to an element you want returned. Use
              %code -1
              or omit to get the whole tree.
          %li
            %code.tp array
            %strong li_attr
            %p
              The attributes to collect from the
              %code LI
              node. Defaults to
              %code [ "id" , "class" ]
          %li
            %code.tp array
            %strong a_attr
            %p
              The attributes to collect from the
              %code A
              node. Defaults to
              %code [ ]
          %li
            %code.tp string
            %strong is_callback
            %p Used internally.
