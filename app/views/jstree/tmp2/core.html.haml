!!! Strict
%html{:xmlns => "http://www.w3.org/1999/xhtml"}
  %head
    %meta{:content => "text/html; charset=utf-8", "http-equiv" => "Content-Type"}/
    %title jsTree Testing
    %script{:src => "../js/jquery.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.cookie.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.hotkeys.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.jstree.js", :type => "text/javascript"}
    %link{:href => "syntax/!style.css", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "!style.css", :rel => "stylesheet", :type => "text/css"}/
    %script{:src => "syntax/!script.js", :type => "text/javascript"}
  %body
    #container
      %h1 jsTree v.1.0 - Core
      %h2 Description
      #description
        %h3 Including the files
        %p First of all, as jsTree is a jQuery component, you need to include jQuery itself. jsTree v.1.0 requires jQuery version 1.4.2
        .code_f
          %pre{:class => "brush:xml;"}
            :preserve
              
              &lt;script type="text/javascript" src="_lib/jquery.js"&gt;&lt;/script&gt;
        %p Then you need to include jsTree:
        .code_f
          %pre{:class => "brush:xml;"}
            :preserve
              
              &lt;script type="text/javascript" src="jquery.jstree.js"&gt;&lt;/script&gt;
        %p Or you could use the minified version:
        .code_f
          %pre{:class => "brush:xml;"}
            :preserve
              
              &lt;script type="text/javascript" src="jquery.jstree.min.js"&gt;&lt/script&gt;
        %p
          You may change the path to whatever you like, but it is recommended not to rename
          %code jquery.tree.js
          or
          %code jquery.tree.min.js
          as the filenames may be used for path autodetection (for example in the
          %code themes
          plugin, but if you really need to rename the file most plugins will give you the option to set the path manually).
        %p Additionally some plugins have dependencies - plugins that detect a dependency is missing will throw an error.
        %h3 Creating and configuring an instance
        %p You can create a tree in the following manner:
        .code_f
          %pre{:class => "brush:js;"}
            :preserve
              
              jQuery("some-selector-to-container-node-here").jstree([ config_object ]);
        %p
          In the optional config object you specify all the options that you want to set. Each plugin will describe its configuration and defaults. In the
          %a{:href => "#configuration"} configuration section
          below you will find the options defined by the core. Each plugin's options (even the core) are set in their own subobject, which is named after the plugin. For example all of the core's options are set in the
          %code core
          key of the config object:
        .code_f
          %pre{:class => "brush:js;"}
            :preserve
              
              jQuery("some-selector-to-container-node-here")
              	.jstree({
              		core : {
              			/* core options go here */
              		}
              	});
        %p.note Please note that if your options for a given plugin are the same as the defaults you may omit those options or omit the subobject completely (if you do not need to modify the defaults).
        %p
          There is only one special config option that is not a part of any plugin - this is the
          %code plugins
          option, which defines a list of active plugins for the instance being created. Although many plugins may be included, only the ones listed in this option will be active. The only autoincluded "plugin" is the jstree core.
        .code_f
          %pre{:class => "brush:js;"}
            :preserve
              
              jQuery("some-selector-to-container-node-here")
              	.jstree({
              		core : { /* core options go here */ },
              		plugins : [ "themes", "html_data", "some-other-plugin" ]
              	});
        %h3 Interacting with the tree
        %p To perform an operation programatically on a given instance you can use two methods:
        .code_f
          %pre{:class => "brush:js;"}
            :preserve
              
              /* METHOD ONE */
              jQuery("some-selector-to-container-node-here")
              	.jstree("operation_name" [, argument_1, argument_2, ...]);
              
              /* METHOD TWO */
              jQuery.jstree._reference(needle) 
              	/* NEEDLE can be a DOM node or selector for the container or a node within the container */
              	.operation_name([ argument_1, argument_2, ...]);
        %p.note
          NOTE: Functions prefixed with
          %code _
          can not be called with method one.
        %p
          jsTree uses events to notify of any changes happening in the tree. All events fire on the tree container in the
          %code jstree
          namespace and are named after the function that triggered them. Please note that for some events it is best to bind before creating the instance. For example:
        .code_f
          %pre{:class => "brush:js;"}
            :preserve
              
              jQuery("some-container")
              	.bind("loaded.jstree", function (event, data) {
              		alert("TREE IS LOADED");
              	})
              	.jstree({ /* configuration here */ });
        %p
          Please note the second parameter
          = succeed "." do
            %code data
          Its structure is as follows:
        .code_f
          %pre{:class => "brush:js;"}
            :preserve
              
              { 
              	"inst" : /* the actual tree instance */, 
              	"args" : /* arguments passed to the function */, 
              	"rslt" : /* any data the function passed to the event */, 
              	"rlbk" : /* an optional rollback object - it is not always present */
              }
        %p
          There is also one special event -
          = succeed "." do
            %code before.jstree
          This events enables you to prevent an operation from executing. Look at the
          %a{:href => "#demos"} demo
          below.
      %h2#configuration Configuration
      .panel.configuration
        %h3 html_titles
        %p.meta
          Boolean. Default is
          = succeed "." do
            %code false
        %p Defines whether titles can contain HTML code.
        %h3 animation
        %p.meta
          A number. Default is
          = succeed "." do
            %code 500
        %p
          Defines the duration of open/close animations.
          %code 0
          means no animation.
        %h3 initially_open
        %p.meta
          An array. Default is
          = succeed "." do
            %code []
        %p Defines which nodes are to be automatically opened when the tree finishes loading - a list of IDs is expected.
        %h3 rtl
        %p.meta
          Boolean. Default is
          = succeed "." do
            %code false
        %p
          Defines whether the tree is in right-to-left mode (also make sure you are using a RTL theme - for example the included
          = succeed ")." do
            %code default-rtl
        %h3 strings
        %p.meta
          Object. Default is
          = succeed "." do
            %code { loading : "Loading ...", new_node : "New node" }
        %p Contains strings needed for the operation of the tree so that you can localize.
      %h2#demos Demos
      .panel
        %h3 Binding to an event and executing an action
        %input#toggle_node.button{:style => "clear:both;", :type => "button", :value => "toggle_node"}/
        #demo1.demo
          %ul
            %li#phtml_1
              %a{:href => "#"} Root node 1
              %ul
                %li#phtml_2
                  %a{:href => "#"} Child node 1
                %li#phtml_3
                  %a{:href => "#"} Child node 2
            %li#phtml_4
              %a{:href => "#"} Root node 2
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#toggle_node").click(function () {
          $("#demo1").jstree("toggle_node","#phtml_1");
          });
          $("#demo1")
          \.bind("open_node.jstree close_node.jstree", function (e) {
          $("#log1").html("Last operation: " + e.type);
          })
          \.jstree({ "plugins" : [ "themes", "html_data" ] });
          });
        %p#log1.log{:style => "clear:both;"}  
        %h3 Preventing an action
        %p This is the same demo as above, but this time the operation will be prevented.
        %input#toggle_node2.button{:style => "clear:both;", :type => "button", :value => "toggle_node"}/
        #demo2.demo
          %ul
            %li#html_1
              %a{:href => "#"} Root node 1
              %ul
                %li#html_2
                  %a{:href => "#"} Child node 1
                %li#html_3
                  %a{:href => "#"} Child node 2
            %li#html_4
              %a{:href => "#"} Root node 2
        :javascript
          $(function () {
          	$("#toggle_node2").click(function () { 
          		$("#demo2").jstree("toggle_node","#html_1");
          	});
          	$("#demo2")
          		.bind("open_node.jstree close_node.jstree", function (e) {
          			$("#log2").html("Last operation: " + e.type);
          		})
          		.jstree({ "plugins" : [ "themes", "html_data" ] });
          	});
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#demo2").bind("before.jstree", function (e, data) {
          if(data.func === "open_node") {
          $("#log2").html(data.args[0].attr("id"));
          e.stopImmediatePropagation();
          return false;
          }
          });
          });
        %p#log2.log{:style => "clear:both;"}  
        %p
          The important part is
          = succeed "." do
            %code e.stopImmediatePropagation(); return false
      %h2#api API
      .panel.api
        %p.note
          Use extra caution when working with functions prefixed with an underscore -
          = succeed "!" do
            %code _
          = succeed "Those" do
            %br/
          functions are probably for internal usage only.
        %h3{:id => "jstree.defaults"} jQuery.jstree.defaults
        %p.meta An object. Default is a collection of all included plugin's defaults.
        %p This object is exposed so that you can apply standart settings to all future instances
        %h3{:id => "jstree.plugin"} jQuery.jstree.plugin ( plugin_name , plugin_data )
        %p This function is used by developers to extend jstree (add "plugins").
        %ul.arguments
          %li
            %code.tp string
            %strong plugin_name
            %p The plugin name - it should be unique.
          %li
            %code.tp object
            %strong plugin_data
            %p
              The plugin itself. It consists of
              %code __init
              \&amp;
              %code __destroy
              functions,
              %code defaults
              object (that of course could be an array or a simple value) and a
              %code _fn
              object, whose keys are all the functions you are extending jstree with. You can overwrite functions (but you can in your function call the overriden old function), and you are responsible for triggering events and setting rollback points. You can omit any of the elements in the
              %code plugin_data
              param. Keep in mind jstree will automatically clear classes prepended with
              %code jstree-
              and all events in the
              %code jstree
              namespace when destroying a tree, so you do not need to worry about those.
            %p Read jstree's code for examples on how to develop plugins.
        %h3{:id => "jstree.rollback"} jQuery.jstree.rollback ( rollback_object )
        %p This function will roll the tree back to the state specified by the rollback object
        %ul.arguments
          %li
            %code.tp string
            %strong rollback_object
            %p
              Normally you will get this object from the event you are handling. You can of course use
              %code .get_rollback()
              to get the current state of the tree as a rollback object.
            .code_f
              %pre{:class => "brush:js;"}
                :preserve
                  
                  $("some-container").bind("some-event.jstree", function (e, data) {
                  	$.jstree.rollback(data.rlbk);
                  });            %p
              Keep in mind that not all events will give you a rollback object - sometimes
              %code data.rlbk
              will be
              = succeed "." do
                %code false
        %h3{:id => "jstree._focused"} jQuery.jstree._focused ()
        %p Returns the currently focused tree instance on the page. If not interaction has been made - it is the last one to be created.
        %h3{:id => "jstree._reference"} jQuery.jstree._reference ( needle )
        %p
          Returns the tree instance for the specified
          = succeed "." do
            %code needle
        %ul.arguments
          %li
            %code.tp mixed
            %strong needle
            %p This can be a DOM node, jQuery node or selector pointing to the tree container, or an element within the tree.
        %h3{:id => "jstree._instance"} jQuery.jstree._instance ( index , container , settings )
        %p
          This function is used internally when creating new tree instances. Calling this function by itself is not enough to create a new instance. To create a tree use the documented method
          = succeed "." do
            %code $("selector").jstree([ options ])
        %h3{:id => "jstree._fn"} jQuery.jstree._fn
        %p This object stores all functions included by plugins. It is used internally as a prototype for all instances - do not modify manually.
        %h3#data .data
        %p An object where all plugins store instance specific data. Do not modify manually.
        %h3#get_settings .get_settings ()
        %p Returns a copy of the instance's settings object - the defaults, extended by your own config object.
        %h3#_get_settings ._get_settings ()
        %p Returns the instance's settings object - the defaults, extended by your own config object.
        %h3#get_index .get_index ()
        %p Returns the internal instance index.
        %h3#get_container .get_container ()
        %p Returns the jQuery extended container node of the tree.
        %h3#_set_settings ._set_settings ( settings )
        %p
          Replace the settings object with the
          %code settings
          param. Please note that not all plugins will react to the change. Unless you know exactly what you are doing you'd be better off recreating the tree with the new settings.
        %h3#init .init ()
        %p This function is used internally when creating a new instance. Triggers an event, which fires after the tree is initialized, but not yet loaded.
        %h3#destroy .destroy ()
        %p
          Destroys the instance - it will automatically remove all bound events in the
          %code jstree
          namespace &amp; remove all classes starting with
          = succeed "." do
            %code jstree-
          Triggers an event.
        %h3#save_opened .save_opened ()
        %p Stores the currently open nodes before refreshing. Used internally. Triggers an event.
        %h3#reopen .reopen ( is_callback )
        %p
          Reopens all the nodes stored by
          %code save_opened
          or set in the
          %code initially_open
          config option on first load. It is called multiple times while reopening nodes - the
          %code is_callback
          param determines if this is the first call (
          %code> false
          ) or not. Used internally. Triggers an event.
        %h3#refresh .refresh ( node )
        %p Refreshes the tree. Saves all open nodes, and reloads and then reopens all saved nodes. Triggers an event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to an element within the tree. If set this will reload only the given node - otherwise - the whole tree. Passing
              %code -1
              also reloads the whole tree.
        %h3#loaded .loaded ()
        %p
          A dummy function, whose purpose is only to trigger the loaded event. This event is triggered once after the tree's root nodes are loaded, but before any nodes set in
          %code initially_open
          are opened.
        %h3#set_focus .set_focus ()
        %p Makes the current instance the focused one on the page. Triggers an event.
        %h3#is_focused .is_focused ()
        %p
          Returns
          %code true
          if the current instance is the focused one, otherwise returns
          = succeed "." do
            %code false
        %h3#_get_node ._get_node ( node )
        %p
          Return the jQuery extended
          %code LI
          element of the node,
          %code -1
          if the container node is passed, or
          %code false
          otherwise.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
        %h3#_get_next ._get_next ( node , strict )
        %p
          Gets the
          %code LI
          element representing the node next to the passed
          = succeed "." do
            %code node
          Returns
          %code false
          on failure.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element within the tree, whose next sibling we want.
          %li
            %code.tp bool
            %strong strict
            %p
              If set to
              %code true
              only immediate siblings are calculated. Otherwise if the
              %code node
              is the last child of its parent this function will "jump out" and return the parent's next sibling, etc. Default is
              = succeed "." do
                %code false
        %h3#_get_prev ._get_prev ( node , strict )
        %p
          Gets the
          %code LI
          element representing the node previous to the passed
          = succeed "." do
            %code node
          Returns
          %code false
          on failure.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element within the tree, whose previous sibling we want.
          %li
            %code.tp bool
            %strong strict
            %p
              If set to
              %code true
              only immediate siblings are calculated. Otherwise if the
              %code node
              is the first child of its parent this function will "jump out" and return the parent itself. Default is
              = succeed "." do
                %code false
        %h3#_get_parent ._get_parent ( node )
        %p
          Gets the
          %code LI
          element representing the parent of the passed
          = succeed "." do
            %code node
          Returns
          %code false
          on failure.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element within the tree, whose parent we want.
        %h3#_get_children ._get_children ( node )
        %p
          Gets the
          %code LI
          elements representing the children of the passed
          = succeed "." do
            %code node
          Returns
          %code false
          on failure (or if the node has no children).
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to an element within the tree, whose children we want. Use
              %code -1
              to return all root nodes.
        %h3#get_path .get_path ( node , id_mode )
        %p Return the path to a node, either as an array of IDs or as an array of node names.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element within the tree, whose path we want.
          %li
            %code.tp bool
            %strong id_mode
            %p
              If set to
              %code true
              IDs are returned instead of the names of the parents. Default is
              = succeed "." do
                %code false
        %h3#open_node .open_node ( node , callback , skip_animation )
        %p
          Opens a closed node, so that its children are visible. If the
          %code animation
          config option is greater than
          %code 0
          the children are revealed using a slide down animation, whose duration is the value of the
          %code animation
          config option in milliseconds. Triggers an event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element we want opened.
          %li
            %code.tp function
            %strong callback
            %p
              A callback function executed once the node is opened. Used mostly internally, you'd be better of waiting for the event. You can skip this, by not specifying it, or by passing
              = succeed "." do
                %code false
          %li
            %code.tp bool
            %strong skip_animation
            %p
              If set to
              %code true
              the animation set in the
              %code animation
              config option is skipped. Default is
              = succeed "." do
                %code false
        %h3#close_node .close_node ( node , skip_animation )
        %p
          Closes an open node, so that its children are not visible. If the
          %code animation
          config option is greater than
          %code 0
          the children are hidden using a slide up animation, whose duration is the value of the
          %code animation
          config option in milliseconds. Triggers an event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element we want closed.
          %li
            %code.tp bool
            %strong skip_animation
            %p
              If set to
              %code true
              the animation set in the
              %code animation
              config option is skipped. Default is
              = succeed "." do
                %code false
        %h3#toggle_node .toggle_node ( node )
        %p If a node is closed - this function opens it, if it is open - calling this function will close it.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element we want toggled.
        %h3#open_all .open_all ( node , original_obj )
        %p
          Opens all descendants of the
          %code node
          node.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to an element whose descendants you want opened. If this param is omitted or set to
              %code -1
              all nodes in the tree are opened.
          %li
            %code.tp mixed
            %strong original_obj
            %p Used internally when recursively calling the same function - do not pass this param.
        %h3#close_all .close_all ( node )
        %p
          Closes all descendants of the
          %code node
          node.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to an element whose descendants you want closed. If this param is omitted or set to
              %code -1
              all nodes in the tree are closed.
        %div{:style => "height:1px; visibility:hidden;"}
          %span#is_leaf &nbsp;
          %span#is_closed &nbsp;
        %h3#is_open .is_open ( node ), .is_closed ( node ), .is_leaf ( node )
        %p
          Those function check if the
          %code node
          is in a state.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element you want checked.
        %h3#clean_node .clean_node ( node )
        %p
          Applies all necessary classes to the
          %code node
          and its descendants. Used internally. Triggers an event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to an element you want cleaned. If this param is omitted or set to
              %code -1
              all nodes in the tree are cleaned.
        %h3#get_rollback .get_rollback ()
        %p Get the current tree's state in the rollback format. Used mainly internally by plugins.
        %h3#set_rollback .set_rollback ( html , data )
        %p
          Rollback the tree. Used ONLY internally! Both arguments are part of the rollback object. If you need to rollback - take a look at
          = succeed "." do
            %a{:href => "#jstree.rollback"} jQuery.jstree.rollback()
          Triggers event.
        %h3#load_node .load_node ( node , success_callback , error_callback )
        %p A dummy function that is overwritten by data plugins. Triggers event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p
              This can be a DOM node, jQuery node or selector pointing to an element you want loaded. Use
              %code -1
              for root nodes.
          %li
            %code.tp function
            %strong success_callback
            %p A function to be executed once the node is loaded successfully - used internally. You should wait for the event.
          %li
            %code.tp function
            %strong error_callback
            %p A function to be executed if the node is not loaded due to an error - used internally. You should wait for the event.
        %h3#_is_loaded ._is_loaded ( node )
        %p
          A dummy function that should return
          %code true
          if the node's children are loaded or
          %code false
          otherwise.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element you want to check.
        %h3#create_node .create_node ( node , position , js , callback , is_loaded )
        %p Creates the DOM structure necessary for a new node. Triggers an event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to the element you want to create in (or next to).
          %li
            %code.tp mixed
            %strong position
            %p
              The position of the newly created node. This can be a zero based index to position the element at a specific point among the current children. You can also pass in one of those strings:
              = succeed "," do
                %code "before"
              = succeed "," do
                %code "after"
              = succeed "," do
                %code "inside"
              = succeed "," do
                %code "first"
              = succeed "." do
                %code "last"
          %li
            %code.tp object
            %strong js
            %p The data for the newly created node. Consists of three keys:
            %p{:style => "margin-left:25px;"}
              %code.tp attr
              \- an object of attributes (same used for
              = succeed "." do
                %code jQuery.attr()
              You can omit this key;
              %br/
              %code.tp state
              \- a string - either
              %code "open"
              or
              = succeed "," do
                %code "closed"
              for a leaf node - omit this key;
              %br/
              %code.tp data
              \- a string or an object - if a string is passed it is used for the title of the node, if an object is passed there are two keys you can specify:
              %code attr
              and
              = succeed ";" do
                %code title
          %li
            %code.tp function
            %strong callback
            %p A function to be executed once the node is created - used internally. You should wait for the event.
          %li
            %code.tp bool
            %strong is_loaded
            %p Specifies if the parent of the node is loaded or not - used ONLY internally.
        %h3#get_text .get_text ( node )
        %p Returns the title of a node.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to the element whose title you need.
        %h3#set_text .set_text ( node , text )
        %p
          Sets the title of a node. Triggers an event. This is used mostly internally - wait for a
          %a{:href => "#rename_node"} .rename_node event
          to avoid confusion.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to the element whose title you want to change.
          %li
            %code.tp string
            %strong text
            %p The new title.
        %h3#rename_node .rename_node ( node , text )
        %p Sets the title of a node. Triggers an event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to the element whose title you want to change.
          %li
            %code.tp string
            %strong text
            %p The new title.
        %h3#delete_node .delete_node ( node )
        %p Removes a node. Triggers an event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to the element you want to remove.
        %h3#prepare_move .prepare_move ( o , r , pos , cb , is_cb )
        %p This function is used internally to prepare all necessary variables and nodes when moving a node around. It is automatically called as needed - you do not need to call it manually. Triggers an event.
        %h3#check_move .check_move ()
        %p Checks if the prepared move is a valid one.
        %h3#move_node .move_node ( node , ref , position , is_copy , is_prepared , skip_check )
        %p Moves a node to a new place. Triggers an event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to the element you want to move.
          %li
            %code.tp mixed
            %strong ref
            %p
              This can be a DOM node, jQuery node or selector pointing to the element which will be the reference element in the move.
              %code -1
              may be used too (to indicate the container node).
          %li
            %code.tp mixed
            %strong position
            %p
              The new position of the moved node. This can be a zero based index to position the element at a specific point among the reference node's current children. You can also use one of these strings:
              = succeed "," do
                %code "before"
              = succeed "," do
                %code "after"
              = succeed "," do
                %code "inside"
              = succeed "," do
                %code "first"
              = succeed "." do
                %code "last"
          %li
            %code.tp bool
            %strong is_copy
            %p Should this be a copy or a move operation.
          %li
            %code.tp bool
            %strong is_prepared
            %p Used internally when this function is called recursively.
          %li
            %code.tp bool
            %strong skip_check
            %p
              If this is set to
              %code true
              %a{:href => "#check_move"} check_move
              is not called.
        %h3#_get_move ._get_move ()
        %p
          Returns the lastly prepared move. The returned object contains:
          %br/
          %code .o
          \- the node being moved
          %br/
          %code .r
          \- the reference node in the move
          %br/
          %code .ot
          \- the origin tree instance
          %br/
          %code .rt
          \- the reference tree instance
          %br/
          %code .p
          \- the position to move to (may be a string -
          = succeed "," do
            %code "last"
          = succeed "," do
            %code "first"
          etc)
          %br/
          %code .cp
          \- the calculated position to move to (always a number)
          %br/
          %code .np
          \- the new parent
          %br/
