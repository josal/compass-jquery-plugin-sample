!!! Strict
%html{:xmlns => "http://www.w3.org/1999/xhtml"}
  %head
    %meta{:content => "text/html; charset=utf-8", "http-equiv" => "Content-Type"}/
    %title jsTree v.1.0 - UI documentation
    %script{:src => "../js/jquery.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.cookie.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.hotkeys.js", :type => "text/javascript"}
    %script{:src => "../js/jquery.jstree.js", :type => "text/javascript"}
    %link{:href => "syntax/!style.css", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "!style.css", :rel => "stylesheet", :type => "text/css"}/
    %script{:src => "syntax/!script.js", :type => "text/javascript"}
  %body
    #container
      %h1 jsTree v.1.0 - UI plugin
      %h2 Description
      #description
        %p
          The
          %code UI
          plugin handles selecting, deselecting and hovering tree items.
      %h2#configuration Configuration
      .panel.configuration
        %h3 select_limit
        %p.meta
          A number. Default is
          = succeed "." do
            %code -1
        %p
          Defines how many nodes can be selected at a given time (
          %code -1
          means unlimited).
        %h3 select_multiple_modifier
        %p.meta
          A string. Default is
          = succeed "." do
            %code "ctrl"
        %p
          The special key used to make a click add to the selection and not replace it (
          %code> "ctrl"
          ,
          = succeed "," do
            %code "shift"
          = succeed "," do
            %code "alt"
          = succeed ")." do
            %code "meta"
          = succeed "You" do
            %br/
          can also set this to
          %code "on"
          making every click add to the selection.
        %h3 selected_parent_close
        %p.meta
          A string (or
          = succeed ")." do
            %code false
          Default is
          = succeed "." do
            %code "select_parent"
        %p
          What action to take when a selected node's parent is closed (making the selected node invisible). Possible values are
          %code false
          \- do nothing,
          %code "select_parent"
          \- select the closed node's parent and
          %code "deselect"
          \- deselect the node.
        %h3 select_prev_on_delete
        %p.meta
          A boolean. Default is
          = succeed "." do
            %code true
        %p
          If set to
          %code true
          when a selected node is deleted, its previous sibling (or parent) is selected.
        %h3 disable_selecting_children
        %p.meta
          A boolean. Default is
          = succeed "." do
            %code false
        %p
          If set to
          %code true
          you will not be able to select children of already selected nodes.
        %h3 initially_select
        %p.meta
          An array. Default is
          = succeed "." do
            %code []
        %p Defines which nodes are to be automatically selected when the tree finishes loading - a list of IDs is expected.
      %h2#demos Demos
      .panel
        %h3 Using the UI plugin
        #demo1.demo
          %ul
            %li#phtml_1
              %a{:href => "#"} Root node 1
              %ul
                %li#phtml_2
                  %a{:href => "#"} Child node 1
                %li#phtml_3
                  %a{:href => "#"} Child node 2
            %li#phtml_4
              %a{:href => "#"} Root node 2
        %script.source{:type => "text/javascript"}
          $(function () {
          $("#demo1").jstree({
          "ui" : {
          "select_limit" : 2,
          "select_multiple_modifier" : "alt",
          "selected_parent_close" : "select_parent",
          "initially_select" : [ "phtml_2" ]
          },
          "core" : { "initially_open" : [ "phtml_1" ] },
          "plugins" : [ "themes", "html_data", "ui" ]
          });
          });
      %h2#api API
      .panel.api
        %h3#_get_node ._get_node ( node , allow_multiple )
        %p
          Overrides the function form the
          %a{:href => "core.html#_get_node"} core
          module.
          %br>/
          if
          %code node
          is
          %code undefined
          or
          %code null
          and
          %code allow_multiple
          is
          %code true
          all the currently selected nodes are returned
          %br>/
          if
          %code node
          is
          %code undefined
          or
          %code null
          and
          %code allow_multiple
          is NOT
          %code true
          only the last selected node is returned.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
          %li
            %code.tp boolean
            %strong allow_multiple
            %p
              Whether to return all selected nodes or only the last selected one if
              %code node
              is
              = succeed "." do
                %code null
        %h3#save_selected .save_selected ( )
        %p
          Saves away the current selection state of the tree (saves it in a variable, so do not expect a restore after a refresh - for that functionality refer to the
          = succeed "." do
            %a{:href => "cookies.html"} cookies plugin
          Used mostly internally. Triggers an event.
        %h3#reselect .reselect ( )
        %p Restores the state of the tree using the variable saved in the above function. Used mostly internally. Triggers an event.
        %h3#refresh .refresh ( node )
        %p
          Overrides the function form the
          %a{:href => "core.html#refresh"} core
          module.
          %br>/
          Enables saving the selection state before the refresh and restoring it afterwards.
        %h3#hover_node .hover_node ( node )
        %p Sets the specified node as hovered. Triggers an event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
        %h3#dehover_node .dehover_node ( )
        %p Removes the hover state from the currently hovered node (if there is one). Triggers an event.
        %h3#select_node .select_node ( node , check , event )
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
          %li
            %code.tp bool
            %strong check
            %p
              Whether to check the specified rules and do appropriate actions (check
              = succeed "," do
                %code select_limit
              deselect other nodes respectively, etc) or to just force selection of the node regardless of
              = succeed "." do
                %code select_limit
          %li
            %code.tp event
            %strong event
            %p Used internally - when a click on a node caused this function to be executed.
        %div{:style => "height:1px; visibility:hidden; overflow:hidden;"}
          %span#toggle_select Â 
        %h3#deselect_node .deselect_node ( node ), .toggle_select ( node )
        %p
          There functions control the selected state on a node.
          %code deselect_node
          triggers an event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
        %h3#deselect_all .deselect_all ( context )
        %p Deselects all selected nodes. If context is set - only the selected nodes within that context are deselected. Triggers an event.
        %ul.arguments
          %li
            %code.tp mixed
            %strong context
            %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
        %h3#get_selected .get_selected ( context )
        %p Returns all selected nodes. If context is set - only the selected nodes within that context are returned.
        %ul.arguments
          %li
            %code.tp mixed
            %strong context
            %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
        %h3#is_selected .is_selected ( node )
        %p Returns whether the specified node is selected or not.
        %ul.arguments
          %li
            %code.tp mixed
            %strong node
            %p This can be a DOM node, jQuery node or selector pointing to an element within the tree.
